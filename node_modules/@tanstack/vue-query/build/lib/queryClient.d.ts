import { QueryClient as QC } from '@tanstack/query-core';
import type { QueryKey, QueryClientConfig, SetDataOptions, ResetQueryFilters, ResetOptions, CancelOptions, InvalidateQueryFilters, InvalidateOptions, RefetchQueryFilters, RefetchOptions, FetchQueryOptions, QueryFunction, FetchInfiniteQueryOptions, InfiniteData, DefaultOptions, QueryObserverOptions, MutationKey, MutationObserverOptions, QueryFilters, MutationFilters, QueryState, Updater } from '@tanstack/query-core';
import type { MaybeRefDeep } from './types';
export declare class QueryClient extends QC {
    constructor(config?: MaybeRefDeep<QueryClientConfig>);
    isRestoring: import("vue-demi").Ref<boolean>;
    isFetching(filters?: MaybeRefDeep<QueryFilters>): number;
    isFetching(queryKey?: MaybeRefDeep<QueryKey>, filters?: MaybeRefDeep<QueryFilters>): number;
    isMutating(filters?: MaybeRefDeep<MutationFilters>): number;
    getQueryData<TData = unknown>(queryKey: MaybeRefDeep<QueryKey>, filters?: MaybeRefDeep<QueryFilters>): TData | undefined;
    getQueriesData<TData = unknown>(queryKey: MaybeRefDeep<QueryKey>): [QueryKey, TData | undefined][];
    getQueriesData<TData = unknown>(filters: MaybeRefDeep<QueryFilters>): [QueryKey, TData | undefined][];
    setQueryData<TData>(queryKey: MaybeRefDeep<QueryKey>, updater: Updater<TData | undefined, TData | undefined>, options?: MaybeRefDeep<SetDataOptions>): TData | undefined;
    setQueriesData<TData>(queryKey: MaybeRefDeep<QueryKey>, updater: Updater<TData | undefined, TData | undefined>, options?: MaybeRefDeep<SetDataOptions>): [QueryKey, TData | undefined][];
    setQueriesData<TData>(filters: MaybeRefDeep<QueryFilters>, updater: Updater<TData | undefined, TData | undefined>, options?: MaybeRefDeep<SetDataOptions>): [QueryKey, TData | undefined][];
    getQueryState<TData = unknown, TError = undefined>(queryKey: MaybeRefDeep<QueryKey>, filters?: MaybeRefDeep<QueryFilters>): QueryState<TData, TError> | undefined;
    removeQueries(filters?: MaybeRefDeep<QueryFilters>): void;
    removeQueries(queryKey?: MaybeRefDeep<QueryKey>, filters?: MaybeRefDeep<QueryFilters>): void;
    resetQueries<TPageData = unknown>(filters?: MaybeRefDeep<ResetQueryFilters<TPageData>>, options?: MaybeRefDeep<ResetOptions>): Promise<void>;
    resetQueries<TPageData = unknown>(queryKey?: MaybeRefDeep<QueryKey>, filters?: MaybeRefDeep<ResetQueryFilters<TPageData>>, options?: MaybeRefDeep<ResetOptions>): Promise<void>;
    cancelQueries(filters?: MaybeRefDeep<QueryFilters>, options?: MaybeRefDeep<CancelOptions>): Promise<void>;
    cancelQueries(queryKey?: MaybeRefDeep<QueryKey>, filters?: MaybeRefDeep<QueryFilters>, options?: MaybeRefDeep<CancelOptions>): Promise<void>;
    invalidateQueries<TPageData = unknown>(filters?: MaybeRefDeep<InvalidateQueryFilters<TPageData>>, options?: MaybeRefDeep<InvalidateOptions>): Promise<void>;
    invalidateQueries<TPageData = unknown>(queryKey?: MaybeRefDeep<QueryKey>, filters?: MaybeRefDeep<InvalidateQueryFilters<TPageData>>, options?: MaybeRefDeep<InvalidateOptions>): Promise<void>;
    refetchQueries<TPageData = unknown>(filters?: MaybeRefDeep<RefetchQueryFilters<TPageData>>, options?: MaybeRefDeep<RefetchOptions>): Promise<void>;
    refetchQueries<TPageData = unknown>(queryKey?: MaybeRefDeep<QueryKey>, filters?: MaybeRefDeep<RefetchQueryFilters<TPageData>>, options?: MaybeRefDeep<RefetchOptions>): Promise<void>;
    fetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(options: MaybeRefDeep<FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>>): Promise<TData>;
    fetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(queryKey: MaybeRefDeep<TQueryKey>, options?: MaybeRefDeep<FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>>): Promise<TData>;
    fetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(queryKey: MaybeRefDeep<TQueryKey>, queryFn: QueryFunction<TQueryFnData, TQueryKey>, options?: MaybeRefDeep<FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>>): Promise<TData>;
    prefetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(options: MaybeRefDeep<FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>>): Promise<void>;
    prefetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(queryKey: MaybeRefDeep<TQueryKey>, options?: MaybeRefDeep<FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>>): Promise<void>;
    prefetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(queryKey: MaybeRefDeep<TQueryKey>, queryFn: QueryFunction<TQueryFnData, TQueryKey>, options?: MaybeRefDeep<FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>>): Promise<void>;
    fetchInfiniteQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(options: MaybeRefDeep<FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>>): Promise<InfiniteData<TData>>;
    fetchInfiniteQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(queryKey: MaybeRefDeep<TQueryKey>, options?: MaybeRefDeep<FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>>): Promise<InfiniteData<TData>>;
    fetchInfiniteQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(queryKey: MaybeRefDeep<TQueryKey>, queryFn: QueryFunction<TQueryFnData, TQueryKey>, options?: MaybeRefDeep<FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>>): Promise<InfiniteData<TData>>;
    prefetchInfiniteQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(options: MaybeRefDeep<FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>>): Promise<void>;
    prefetchInfiniteQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(queryKey: MaybeRefDeep<TQueryKey>, options?: MaybeRefDeep<FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>>): Promise<void>;
    prefetchInfiniteQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(queryKey: MaybeRefDeep<TQueryKey>, queryFn: QueryFunction<TQueryFnData, TQueryKey>, options?: MaybeRefDeep<FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>>): Promise<void>;
    setDefaultOptions(options: MaybeRefDeep<DefaultOptions>): void;
    setQueryDefaults(queryKey: MaybeRefDeep<QueryKey>, options: MaybeRefDeep<QueryObserverOptions<any, any, any, any>>): void;
    getQueryDefaults(queryKey?: MaybeRefDeep<QueryKey>): QueryObserverOptions<any, any, any, any, any> | undefined;
    setMutationDefaults(mutationKey: MaybeRefDeep<MutationKey>, options: MaybeRefDeep<MutationObserverOptions<any, any, any, any>>): void;
    getMutationDefaults(mutationKey?: MaybeRefDeep<MutationKey>): MutationObserverOptions<any, any, any, any> | undefined;
}
//# sourceMappingURL=queryClient.d.ts.map