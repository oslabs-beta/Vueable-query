{"version":3,"file":"queryClient.esm.js","sources":["../../src/queryClient.ts"],"sourcesContent":["import { ref } from 'vue-demi'\nimport { QueryClient as QC } from '@tanstack/query-core'\nimport type {\n  QueryKey,\n  QueryClientConfig,\n  SetDataOptions,\n  ResetQueryFilters,\n  ResetOptions,\n  CancelOptions,\n  InvalidateQueryFilters,\n  InvalidateOptions,\n  RefetchQueryFilters,\n  RefetchOptions,\n  FetchQueryOptions,\n  QueryFunction,\n  FetchInfiniteQueryOptions,\n  InfiniteData,\n  DefaultOptions,\n  QueryObserverOptions,\n  MutationKey,\n  MutationObserverOptions,\n  QueryFilters,\n  MutationFilters,\n  QueryState,\n  Updater,\n} from '@tanstack/query-core'\nimport type { MaybeRefDeep } from './types'\nimport { cloneDeepUnref, isQueryKey } from './utils'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\n\nexport class QueryClient extends QC {\n  constructor(config: MaybeRefDeep<QueryClientConfig> = {}) {\n    const unreffedConfig = cloneDeepUnref(config) as QueryClientConfig\n    const vueQueryConfig: QueryClientConfig = {\n      logger: cloneDeepUnref(unreffedConfig.logger),\n      defaultOptions: cloneDeepUnref(unreffedConfig.defaultOptions),\n      queryCache: unreffedConfig.queryCache || new QueryCache(),\n      mutationCache: unreffedConfig.mutationCache || new MutationCache(),\n    }\n    super(vueQueryConfig)\n  }\n\n  isRestoring = ref(false)\n\n  isFetching(filters?: MaybeRefDeep<QueryFilters>): number\n  isFetching(\n    queryKey?: MaybeRefDeep<QueryKey>,\n    filters?: MaybeRefDeep<QueryFilters>,\n  ): number\n  isFetching(\n    arg1?: MaybeRefDeep<QueryFilters | QueryKey>,\n    arg2?: MaybeRefDeep<QueryFilters>,\n  ): number {\n    const arg1Unreffed = cloneDeepUnref(arg1)\n    const arg2Unreffed = cloneDeepUnref(arg2) as QueryFilters\n    if (isQueryKey(arg1Unreffed)) {\n      return super.isFetching(arg1Unreffed, arg2Unreffed)\n    }\n    return super.isFetching(arg1Unreffed as QueryFilters)\n  }\n\n  isMutating(filters?: MaybeRefDeep<MutationFilters>): number {\n    return super.isMutating(cloneDeepUnref(filters) as MutationFilters)\n  }\n\n  getQueryData<TData = unknown>(\n    queryKey: MaybeRefDeep<QueryKey>,\n    filters?: MaybeRefDeep<QueryFilters>,\n  ): TData | undefined {\n    return super.getQueryData(\n      cloneDeepUnref(queryKey),\n      cloneDeepUnref(filters) as QueryFilters,\n    )\n  }\n\n  getQueriesData<TData = unknown>(\n    queryKey: MaybeRefDeep<QueryKey>,\n  ): [QueryKey, TData | undefined][]\n  getQueriesData<TData = unknown>(\n    filters: MaybeRefDeep<QueryFilters>,\n  ): [QueryKey, TData | undefined][]\n  getQueriesData<TData = unknown>(\n    queryKeyOrFilters: MaybeRefDeep<QueryKey> | MaybeRefDeep<QueryFilters>,\n  ): [QueryKey, TData | undefined][] {\n    const unreffed = cloneDeepUnref(queryKeyOrFilters)\n    if (isQueryKey(unreffed)) {\n      return super.getQueriesData(unreffed)\n    }\n    return super.getQueriesData(unreffed as QueryFilters)\n  }\n\n  setQueryData<TData>(\n    queryKey: MaybeRefDeep<QueryKey>,\n    updater: Updater<TData | undefined, TData | undefined>,\n    options?: MaybeRefDeep<SetDataOptions>,\n  ): TData | undefined {\n    return super.setQueryData(\n      cloneDeepUnref(queryKey),\n      updater,\n      cloneDeepUnref(options) as SetDataOptions,\n    )\n  }\n\n  setQueriesData<TData>(\n    queryKey: MaybeRefDeep<QueryKey>,\n    updater: Updater<TData | undefined, TData | undefined>,\n    options?: MaybeRefDeep<SetDataOptions>,\n  ): [QueryKey, TData | undefined][]\n  setQueriesData<TData>(\n    filters: MaybeRefDeep<QueryFilters>,\n    updater: Updater<TData | undefined, TData | undefined>,\n    options?: MaybeRefDeep<SetDataOptions>,\n  ): [QueryKey, TData | undefined][]\n  setQueriesData<TData>(\n    queryKeyOrFilters: MaybeRefDeep<QueryKey | QueryFilters>,\n    updater: Updater<TData | undefined, TData | undefined>,\n    options?: MaybeRefDeep<SetDataOptions>,\n  ): [QueryKey, TData | undefined][] {\n    const arg1Unreffed = cloneDeepUnref(queryKeyOrFilters)\n    const arg3Unreffed = cloneDeepUnref(options) as SetDataOptions\n    if (isQueryKey(arg1Unreffed)) {\n      return super.setQueriesData(arg1Unreffed, updater, arg3Unreffed)\n    }\n    return super.setQueriesData(\n      arg1Unreffed as QueryFilters,\n      updater,\n      arg3Unreffed,\n    )\n  }\n\n  getQueryState<TData = unknown, TError = undefined>(\n    queryKey: MaybeRefDeep<QueryKey>,\n    filters?: MaybeRefDeep<QueryFilters>,\n  ): QueryState<TData, TError> | undefined {\n    return super.getQueryState(\n      cloneDeepUnref(queryKey),\n      cloneDeepUnref(filters) as QueryFilters,\n    )\n  }\n\n  removeQueries(filters?: MaybeRefDeep<QueryFilters>): void\n  removeQueries(\n    queryKey?: MaybeRefDeep<QueryKey>,\n    filters?: MaybeRefDeep<QueryFilters>,\n  ): void\n  removeQueries(\n    arg1?: MaybeRefDeep<QueryKey | QueryFilters>,\n    arg2?: MaybeRefDeep<QueryFilters>,\n  ): void {\n    const arg1Unreffed = cloneDeepUnref(arg1)\n    if (isQueryKey(arg1Unreffed)) {\n      return super.removeQueries(\n        arg1Unreffed,\n        cloneDeepUnref(arg2) as QueryFilters,\n      )\n    }\n    return super.removeQueries(arg1Unreffed as QueryFilters)\n  }\n\n  resetQueries<TPageData = unknown>(\n    filters?: MaybeRefDeep<ResetQueryFilters<TPageData>>,\n    options?: MaybeRefDeep<ResetOptions>,\n  ): Promise<void>\n  resetQueries<TPageData = unknown>(\n    queryKey?: MaybeRefDeep<QueryKey>,\n    filters?: MaybeRefDeep<ResetQueryFilters<TPageData>>,\n    options?: MaybeRefDeep<ResetOptions>,\n  ): Promise<void>\n  resetQueries<TPageData = unknown>(\n    arg1?: MaybeRefDeep<QueryKey | ResetQueryFilters<TPageData>>,\n    arg2?: MaybeRefDeep<ResetQueryFilters<TPageData> | ResetOptions>,\n    arg3?: MaybeRefDeep<ResetOptions>,\n  ): Promise<void> {\n    const arg1Unreffed = cloneDeepUnref(arg1)\n    const arg2Unreffed = cloneDeepUnref(arg2)\n    if (isQueryKey(arg1Unreffed)) {\n      return super.resetQueries(\n        arg1Unreffed,\n        arg2Unreffed as ResetQueryFilters<TPageData> | undefined,\n        cloneDeepUnref(arg3) as ResetOptions,\n      )\n    }\n    return super.resetQueries(\n      arg1Unreffed as ResetQueryFilters<TPageData>,\n      arg2Unreffed as ResetOptions,\n    )\n  }\n\n  cancelQueries(\n    filters?: MaybeRefDeep<QueryFilters>,\n    options?: MaybeRefDeep<CancelOptions>,\n  ): Promise<void>\n  cancelQueries(\n    queryKey?: MaybeRefDeep<QueryKey>,\n    filters?: MaybeRefDeep<QueryFilters>,\n    options?: MaybeRefDeep<CancelOptions>,\n  ): Promise<void>\n  cancelQueries(\n    arg1?: MaybeRefDeep<QueryKey | QueryFilters>,\n    arg2?: MaybeRefDeep<QueryFilters | CancelOptions>,\n    arg3?: MaybeRefDeep<CancelOptions>,\n  ): Promise<void> {\n    const arg1Unreffed = cloneDeepUnref(arg1)\n    const arg2Unreffed = cloneDeepUnref(arg2)\n    if (isQueryKey(arg1Unreffed)) {\n      return super.cancelQueries(\n        arg1Unreffed,\n        arg2Unreffed as QueryFilters | undefined,\n        cloneDeepUnref(arg3) as CancelOptions,\n      )\n    }\n    return super.cancelQueries(\n      arg1Unreffed as QueryFilters,\n      arg2Unreffed as CancelOptions,\n    )\n  }\n\n  invalidateQueries<TPageData = unknown>(\n    filters?: MaybeRefDeep<InvalidateQueryFilters<TPageData>>,\n    options?: MaybeRefDeep<InvalidateOptions>,\n  ): Promise<void>\n  invalidateQueries<TPageData = unknown>(\n    queryKey?: MaybeRefDeep<QueryKey>,\n    filters?: MaybeRefDeep<InvalidateQueryFilters<TPageData>>,\n    options?: MaybeRefDeep<InvalidateOptions>,\n  ): Promise<void>\n  invalidateQueries<TPageData = unknown>(\n    arg1?: MaybeRefDeep<QueryKey | InvalidateQueryFilters<TPageData>>,\n    arg2?: MaybeRefDeep<InvalidateQueryFilters<TPageData> | InvalidateOptions>,\n    arg3?: MaybeRefDeep<InvalidateOptions>,\n  ): Promise<void> {\n    const arg1Unreffed = cloneDeepUnref(arg1)\n    const arg2Unreffed = cloneDeepUnref(arg2)\n    if (isQueryKey(arg1Unreffed)) {\n      return super.invalidateQueries(\n        arg1Unreffed,\n        arg2Unreffed as InvalidateQueryFilters | undefined,\n        cloneDeepUnref(arg3) as InvalidateOptions,\n      )\n    }\n    return super.invalidateQueries(\n      arg1Unreffed as InvalidateQueryFilters<TPageData>,\n      arg2Unreffed as InvalidateOptions,\n    )\n  }\n\n  refetchQueries<TPageData = unknown>(\n    filters?: MaybeRefDeep<RefetchQueryFilters<TPageData>>,\n    options?: MaybeRefDeep<RefetchOptions>,\n  ): Promise<void>\n  refetchQueries<TPageData = unknown>(\n    queryKey?: MaybeRefDeep<QueryKey>,\n    filters?: MaybeRefDeep<RefetchQueryFilters<TPageData>>,\n    options?: MaybeRefDeep<RefetchOptions>,\n  ): Promise<void>\n  refetchQueries<TPageData = unknown>(\n    arg1?: MaybeRefDeep<QueryKey | RefetchQueryFilters<TPageData>>,\n    arg2?: MaybeRefDeep<RefetchQueryFilters<TPageData> | RefetchOptions>,\n    arg3?: MaybeRefDeep<RefetchOptions>,\n  ): Promise<void> {\n    const arg1Unreffed = cloneDeepUnref(arg1)\n    const arg2Unreffed = cloneDeepUnref(arg2)\n    if (isQueryKey(arg1Unreffed)) {\n      return super.refetchQueries(\n        arg1Unreffed,\n        arg2Unreffed as RefetchQueryFilters | undefined,\n        cloneDeepUnref(arg3) as RefetchOptions,\n      )\n    }\n    return super.refetchQueries(\n      arg1Unreffed as RefetchQueryFilters<TPageData>,\n      arg2Unreffed as RefetchOptions,\n    )\n  }\n\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: MaybeRefDeep<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: MaybeRefDeep<TQueryKey>,\n    options?: MaybeRefDeep<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: MaybeRefDeep<TQueryKey>,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: MaybeRefDeep<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1:\n      | MaybeRefDeep<TQueryKey>\n      | MaybeRefDeep<FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | MaybeRefDeep<FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>>,\n    arg3?: MaybeRefDeep<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<TData> {\n    const arg1Unreffed = cloneDeepUnref(arg1)\n    const arg2Unreffed = cloneDeepUnref(arg2)\n    if (isQueryKey(arg1Unreffed)) {\n      return super.fetchQuery(\n        arg1Unreffed as TQueryKey,\n        arg2Unreffed as QueryFunction<TQueryFnData, TQueryKey>,\n        cloneDeepUnref(arg3) as FetchQueryOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryKey\n        >,\n      )\n    }\n    return super.fetchQuery(\n      arg1Unreffed as FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    )\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: MaybeRefDeep<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: MaybeRefDeep<TQueryKey>,\n    options?: MaybeRefDeep<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: MaybeRefDeep<TQueryKey>,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: MaybeRefDeep<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1: MaybeRefDeep<\n      TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | MaybeRefDeep<FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>>,\n    arg3?: MaybeRefDeep<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<void> {\n    return super.prefetchQuery(\n      cloneDeepUnref(arg1) as any,\n      cloneDeepUnref(arg2) as any,\n      cloneDeepUnref(arg3) as any,\n    )\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: MaybeRefDeep<\n      FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: MaybeRefDeep<TQueryKey>,\n    options?: MaybeRefDeep<\n      FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: MaybeRefDeep<TQueryKey>,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: MaybeRefDeep<\n      FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1: MaybeRefDeep<\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | MaybeRefDeep<\n          FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n        >,\n    arg3?: MaybeRefDeep<\n      FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<InfiniteData<TData>> {\n    const arg1Unreffed = cloneDeepUnref(arg1)\n    const arg2Unreffed = cloneDeepUnref(arg2)\n    if (isQueryKey(arg1Unreffed)) {\n      return super.fetchInfiniteQuery(\n        arg1Unreffed as TQueryKey,\n        arg2Unreffed as QueryFunction<TQueryFnData, TQueryKey>,\n        cloneDeepUnref(arg3) as FetchInfiniteQueryOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryKey\n        >,\n      )\n    }\n    return super.fetchInfiniteQuery(\n      arg1Unreffed as FetchInfiniteQueryOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryKey\n      >,\n    )\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: MaybeRefDeep<\n      FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: MaybeRefDeep<TQueryKey>,\n    options?: MaybeRefDeep<\n      FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: MaybeRefDeep<TQueryKey>,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: MaybeRefDeep<\n      FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1: MaybeRefDeep<\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | MaybeRefDeep<\n          FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n        >,\n    arg3?: MaybeRefDeep<\n      FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<void> {\n    return super.prefetchInfiniteQuery(\n      cloneDeepUnref(arg1) as any,\n      cloneDeepUnref(arg2) as any,\n      cloneDeepUnref(arg3) as any,\n    )\n  }\n\n  setDefaultOptions(options: MaybeRefDeep<DefaultOptions>): void {\n    super.setDefaultOptions(cloneDeepUnref(options) as DefaultOptions)\n  }\n\n  setQueryDefaults(\n    queryKey: MaybeRefDeep<QueryKey>,\n    options: MaybeRefDeep<QueryObserverOptions<any, any, any, any>>,\n  ): void {\n    super.setQueryDefaults(\n      cloneDeepUnref(queryKey),\n      cloneDeepUnref(options) as any,\n    )\n  }\n\n  getQueryDefaults(\n    queryKey?: MaybeRefDeep<QueryKey>,\n  ): QueryObserverOptions<any, any, any, any, any> | undefined {\n    return super.getQueryDefaults(cloneDeepUnref(queryKey))\n  }\n\n  setMutationDefaults(\n    mutationKey: MaybeRefDeep<MutationKey>,\n    options: MaybeRefDeep<MutationObserverOptions<any, any, any, any>>,\n  ): void {\n    super.setMutationDefaults(\n      cloneDeepUnref(mutationKey),\n      cloneDeepUnref(options) as any,\n    )\n  }\n\n  getMutationDefaults(\n    mutationKey?: MaybeRefDeep<MutationKey>,\n  ): MutationObserverOptions<any, any, any, any> | undefined {\n    return super.getMutationDefaults(cloneDeepUnref(mutationKey))\n  }\n}\n"],"names":["QueryClient","QC","constructor","config","unreffedConfig","cloneDeepUnref","vueQueryConfig","logger","defaultOptions","queryCache","QueryCache","mutationCache","MutationCache","isRestoring","ref","isFetching","arg1","arg2","arg1Unreffed","arg2Unreffed","isQueryKey","isMutating","filters","getQueryData","queryKey","getQueriesData","queryKeyOrFilters","unreffed","setQueryData","updater","options","setQueriesData","arg3Unreffed","getQueryState","removeQueries","resetQueries","arg3","cancelQueries","invalidateQueries","refetchQueries","fetchQuery","prefetchQuery","fetchInfiniteQuery","prefetchInfiniteQuery","setDefaultOptions","setQueryDefaults","getQueryDefaults","setMutationDefaults","mutationKey","getMutationDefaults"],"mappings":"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"}