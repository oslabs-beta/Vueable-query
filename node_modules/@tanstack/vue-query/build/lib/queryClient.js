'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vueDemi = require('vue-demi');
var queryCore = require('@tanstack/query-core');
var utils = require('./utils.js');
var queryCache = require('./queryCache.js');
var mutationCache = require('./mutationCache.js');

class QueryClient extends queryCore.QueryClient {
  constructor(config = {}) {
    const unreffedConfig = utils.cloneDeepUnref(config);
    const vueQueryConfig = {
      logger: utils.cloneDeepUnref(unreffedConfig.logger),
      defaultOptions: utils.cloneDeepUnref(unreffedConfig.defaultOptions),
      queryCache: unreffedConfig.queryCache || new queryCache.QueryCache(),
      mutationCache: unreffedConfig.mutationCache || new mutationCache.MutationCache()
    };
    super(vueQueryConfig);
    this.isRestoring = vueDemi.ref(false);
  }

  isFetching(arg1, arg2) {
    const arg1Unreffed = utils.cloneDeepUnref(arg1);
    const arg2Unreffed = utils.cloneDeepUnref(arg2);

    if (utils.isQueryKey(arg1Unreffed)) {
      return super.isFetching(arg1Unreffed, arg2Unreffed);
    }

    return super.isFetching(arg1Unreffed);
  }

  isMutating(filters) {
    return super.isMutating(utils.cloneDeepUnref(filters));
  }

  getQueryData(queryKey, filters) {
    return super.getQueryData(utils.cloneDeepUnref(queryKey), utils.cloneDeepUnref(filters));
  }

  getQueriesData(queryKeyOrFilters) {
    const unreffed = utils.cloneDeepUnref(queryKeyOrFilters);

    if (utils.isQueryKey(unreffed)) {
      return super.getQueriesData(unreffed);
    }

    return super.getQueriesData(unreffed);
  }

  setQueryData(queryKey, updater, options) {
    return super.setQueryData(utils.cloneDeepUnref(queryKey), updater, utils.cloneDeepUnref(options));
  }

  setQueriesData(queryKeyOrFilters, updater, options) {
    const arg1Unreffed = utils.cloneDeepUnref(queryKeyOrFilters);
    const arg3Unreffed = utils.cloneDeepUnref(options);

    if (utils.isQueryKey(arg1Unreffed)) {
      return super.setQueriesData(arg1Unreffed, updater, arg3Unreffed);
    }

    return super.setQueriesData(arg1Unreffed, updater, arg3Unreffed);
  }

  getQueryState(queryKey, filters) {
    return super.getQueryState(utils.cloneDeepUnref(queryKey), utils.cloneDeepUnref(filters));
  }

  removeQueries(arg1, arg2) {
    const arg1Unreffed = utils.cloneDeepUnref(arg1);

    if (utils.isQueryKey(arg1Unreffed)) {
      return super.removeQueries(arg1Unreffed, utils.cloneDeepUnref(arg2));
    }

    return super.removeQueries(arg1Unreffed);
  }

  resetQueries(arg1, arg2, arg3) {
    const arg1Unreffed = utils.cloneDeepUnref(arg1);
    const arg2Unreffed = utils.cloneDeepUnref(arg2);

    if (utils.isQueryKey(arg1Unreffed)) {
      return super.resetQueries(arg1Unreffed, arg2Unreffed, utils.cloneDeepUnref(arg3));
    }

    return super.resetQueries(arg1Unreffed, arg2Unreffed);
  }

  cancelQueries(arg1, arg2, arg3) {
    const arg1Unreffed = utils.cloneDeepUnref(arg1);
    const arg2Unreffed = utils.cloneDeepUnref(arg2);

    if (utils.isQueryKey(arg1Unreffed)) {
      return super.cancelQueries(arg1Unreffed, arg2Unreffed, utils.cloneDeepUnref(arg3));
    }

    return super.cancelQueries(arg1Unreffed, arg2Unreffed);
  }

  invalidateQueries(arg1, arg2, arg3) {
    const arg1Unreffed = utils.cloneDeepUnref(arg1);
    const arg2Unreffed = utils.cloneDeepUnref(arg2);

    if (utils.isQueryKey(arg1Unreffed)) {
      return super.invalidateQueries(arg1Unreffed, arg2Unreffed, utils.cloneDeepUnref(arg3));
    }

    return super.invalidateQueries(arg1Unreffed, arg2Unreffed);
  }

  refetchQueries(arg1, arg2, arg3) {
    const arg1Unreffed = utils.cloneDeepUnref(arg1);
    const arg2Unreffed = utils.cloneDeepUnref(arg2);

    if (utils.isQueryKey(arg1Unreffed)) {
      return super.refetchQueries(arg1Unreffed, arg2Unreffed, utils.cloneDeepUnref(arg3));
    }

    return super.refetchQueries(arg1Unreffed, arg2Unreffed);
  }

  fetchQuery(arg1, arg2, arg3) {
    const arg1Unreffed = utils.cloneDeepUnref(arg1);
    const arg2Unreffed = utils.cloneDeepUnref(arg2);

    if (utils.isQueryKey(arg1Unreffed)) {
      return super.fetchQuery(arg1Unreffed, arg2Unreffed, utils.cloneDeepUnref(arg3));
    }

    return super.fetchQuery(arg1Unreffed);
  }

  prefetchQuery(arg1, arg2, arg3) {
    return super.prefetchQuery(utils.cloneDeepUnref(arg1), utils.cloneDeepUnref(arg2), utils.cloneDeepUnref(arg3));
  }

  fetchInfiniteQuery(arg1, arg2, arg3) {
    const arg1Unreffed = utils.cloneDeepUnref(arg1);
    const arg2Unreffed = utils.cloneDeepUnref(arg2);

    if (utils.isQueryKey(arg1Unreffed)) {
      return super.fetchInfiniteQuery(arg1Unreffed, arg2Unreffed, utils.cloneDeepUnref(arg3));
    }

    return super.fetchInfiniteQuery(arg1Unreffed);
  }

  prefetchInfiniteQuery(arg1, arg2, arg3) {
    return super.prefetchInfiniteQuery(utils.cloneDeepUnref(arg1), utils.cloneDeepUnref(arg2), utils.cloneDeepUnref(arg3));
  }

  setDefaultOptions(options) {
    super.setDefaultOptions(utils.cloneDeepUnref(options));
  }

  setQueryDefaults(queryKey, options) {
    super.setQueryDefaults(utils.cloneDeepUnref(queryKey), utils.cloneDeepUnref(options));
  }

  getQueryDefaults(queryKey) {
    return super.getQueryDefaults(utils.cloneDeepUnref(queryKey));
  }

  setMutationDefaults(mutationKey, options) {
    super.setMutationDefaults(utils.cloneDeepUnref(mutationKey), utils.cloneDeepUnref(options));
  }

  getMutationDefaults(mutationKey) {
    return super.getMutationDefaults(utils.cloneDeepUnref(mutationKey));
  }

}

exports.QueryClient = QueryClient;
//# sourceMappingURL=queryClient.js.map
