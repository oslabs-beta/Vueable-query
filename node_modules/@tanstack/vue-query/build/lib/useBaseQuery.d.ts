import type { ToRefs, UnwrapRef } from 'vue-demi';
import type { QueryObserver, QueryKey, QueryObserverOptions, QueryObserverResult, QueryFunction } from '@tanstack/query-core';
import type { MaybeRef, WithQueryClientKey } from './types';
import type { UseQueryOptions } from './useQuery';
import type { UseInfiniteQueryOptions } from './useInfiniteQuery';
export declare type UseQueryReturnType<TData, TError, Result = QueryObserverResult<TData, TError>> = ToRefs<Readonly<Result>> & {
    suspense: () => Promise<Result>;
};
declare type UseQueryOptionsGeneric<TQueryFnData, TError, TData, TQueryKey extends QueryKey = QueryKey> = UseQueryOptions<TQueryFnData, TError, TData, TQueryKey> | UseInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>;
export declare function useBaseQuery<TQueryFnData, TError, TData, TQueryKey extends QueryKey>(Observer: typeof QueryObserver, arg1: TQueryKey | UseQueryOptionsGeneric<TQueryFnData, TError, TData, TQueryKey>, arg2?: QueryFunction<TQueryFnData, UnwrapRef<TQueryKey>> | UseQueryOptionsGeneric<TQueryFnData, TError, TData, TQueryKey>, arg3?: UseQueryOptionsGeneric<TQueryFnData, TError, TData, TQueryKey>): UseQueryReturnType<TData, TError>;
export declare function parseQueryArgs<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(arg1: MaybeRef<TQueryKey> | MaybeRef<UseQueryOptionsGeneric<TQueryFnData, TError, TData, TQueryKey>>, arg2?: MaybeRef<QueryFunction<TQueryFnData, UnwrapRef<TQueryKey>>> | MaybeRef<UseQueryOptionsGeneric<TQueryFnData, TError, TData, TQueryKey>>, arg3?: MaybeRef<UseQueryOptionsGeneric<TQueryFnData, TError, TData, TQueryKey>>): WithQueryClientKey<QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>>;
export {};
//# sourceMappingURL=useBaseQuery.d.ts.map