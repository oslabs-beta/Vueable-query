import type { ToRefs } from 'vue-demi';
import type { MutationFunction, MutationKey, MutateFunction, MutationObserverResult, MutationObserverOptions } from '@tanstack/query-core';
import type { WithQueryClientKey, MaybeRef, MaybeRefDeep, DistributiveOmit } from './types';
declare type MutationResult<TData, TError, TVariables, TContext> = DistributiveOmit<MutationObserverResult<TData, TError, TVariables, TContext>, 'mutate' | 'reset'>;
export declare type UseMutationOptions<TData, TError, TVariables, TContext> = WithQueryClientKey<MutationObserverOptions<TData, TError, TVariables, TContext>>;
export declare type VueMutationObserverOptions<TData = unknown, TError = unknown, TVariables = void, TContext = unknown> = {
    [Property in keyof UseMutationOptions<TData, TError, TVariables, TContext>]: MaybeRefDeep<UseMutationOptions<TData, TError, TVariables, TContext>[Property]>;
};
declare type MutateSyncFunction<TData = unknown, TError = unknown, TVariables = void, TContext = unknown> = (...options: Parameters<MutateFunction<TData, TError, TVariables, TContext>>) => void;
export declare type UseMutationReturnType<TData, TError, TVariables, TContext, Result = MutationResult<TData, TError, TVariables, TContext>> = ToRefs<Readonly<Result>> & {
    mutate: MutateSyncFunction<TData, TError, TVariables, TContext>;
    mutateAsync: MutateFunction<TData, TError, TVariables, TContext>;
    reset: MutationObserverResult<TData, TError, TVariables, TContext>['reset'];
};
export declare function useMutation<TData = unknown, TError = unknown, TVariables = void, TContext = unknown>(options: MaybeRef<VueMutationObserverOptions<TData, TError, TVariables, TContext>>): UseMutationReturnType<TData, TError, TVariables, TContext>;
export declare function useMutation<TData = unknown, TError = unknown, TVariables = void, TContext = unknown>(mutationFn: MaybeRef<MutationFunction<TData, TVariables>>, options?: MaybeRef<Omit<VueMutationObserverOptions<TData, TError, TVariables, TContext>, 'mutationFn'>>): UseMutationReturnType<TData, TError, TVariables, TContext>;
export declare function useMutation<TData = unknown, TError = unknown, TVariables = void, TContext = unknown>(mutationKey: MaybeRef<MutationKey>, options?: MaybeRef<Omit<VueMutationObserverOptions<TData, TError, TVariables, TContext>, 'mutationKey'>>): UseMutationReturnType<TData, TError, TVariables, TContext>;
export declare function useMutation<TData = unknown, TError = unknown, TVariables = void, TContext = unknown>(mutationKey: MaybeRef<MutationKey>, mutationFn?: MaybeRef<MutationFunction<TData, TVariables>>, options?: MaybeRef<Omit<VueMutationObserverOptions<TData, TError, TVariables, TContext>, 'mutationKey' | 'mutationFn'>>): UseMutationReturnType<TData, TError, TVariables, TContext>;
export declare function parseMutationArgs<TData = unknown, TError = unknown, TVariables = void, TContext = unknown>(arg1: MaybeRef<MutationKey> | MaybeRef<MutationFunction<TData, TVariables>> | MaybeRef<VueMutationObserverOptions<TData, TError, TVariables, TContext>>, arg2?: MaybeRef<MutationFunction<TData, TVariables>> | MaybeRef<VueMutationObserverOptions<TData, TError, TVariables, TContext>>, arg3?: MaybeRef<VueMutationObserverOptions<TData, TError, TVariables, TContext>>): WithQueryClientKey<MutationObserverOptions<TData, TError, TVariables, TContext>>;
export {};
//# sourceMappingURL=useMutation.d.ts.map