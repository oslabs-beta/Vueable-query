'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vueDemi = require('vue-demi');

/* eslint-disable @typescript-eslint/no-explicit-any */
const VUE_QUERY_CLIENT = 'VUE_QUERY_CLIENT';
function getClientKey(key) {
  const suffix = key ? ":" + key : '';
  return "" + VUE_QUERY_CLIENT + suffix;
}
function isQueryKey(value) {
  return Array.isArray(value);
}
function isMutationKey(value) {
  return Array.isArray(value);
}
function updateState(state, update) {
  Object.keys(state).forEach(key => {
    state[key] = update[key];
  });
}
function cloneDeep(value, customizer) {
  if (customizer) {
    const result = customizer(value);

    if (result !== undefined || vueDemi.isRef(value)) {
      return result;
    }
  }

  if (Array.isArray(value)) {
    return value.map(val => cloneDeep(val, customizer));
  }

  if (typeof value === 'object' && isPlainObject(value)) {
    const entries = Object.entries(value).map(([key, val]) => [key, cloneDeep(val, customizer)]);
    return Object.fromEntries(entries);
  }

  return value;
}
function cloneDeepUnref(obj) {
  return cloneDeep(obj, val => {
    if (vueDemi.isRef(val)) {
      return cloneDeepUnref(vueDemi.unref(val));
    }
  });
}

function isPlainObject(value) {
  if (Object.prototype.toString.call(value) !== '[object Object]') {
    return false;
  }

  const prototype = Object.getPrototypeOf(value);
  return prototype === null || prototype === Object.prototype;
}

exports.VUE_QUERY_CLIENT = VUE_QUERY_CLIENT;
exports.cloneDeep = cloneDeep;
exports.cloneDeepUnref = cloneDeepUnref;
exports.getClientKey = getClientKey;
exports.isMutationKey = isMutationKey;
exports.isQueryKey = isQueryKey;
exports.updateState = updateState;
//# sourceMappingURL=utils.js.map
