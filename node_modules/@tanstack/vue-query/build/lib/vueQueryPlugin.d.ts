import type { QueryClientConfig } from '@tanstack/query-core';
import { QueryClient } from './queryClient';
import type { MaybeRefDeep } from './types';
declare global {
    interface Window {
        __VUE_QUERY_CONTEXT__?: QueryClient;
    }
}
declare type ClientPersister = (client: QueryClient) => [() => void, Promise<void>];
interface CommonOptions {
    queryClientKey?: string;
    contextSharing?: boolean;
    clientPersister?: ClientPersister;
}
interface ConfigOptions extends CommonOptions {
    queryClientConfig?: MaybeRefDeep<QueryClientConfig>;
}
interface ClientOptions extends CommonOptions {
    queryClient?: QueryClient;
}
export declare type VueQueryPluginOptions = ConfigOptions | ClientOptions;
export declare const VueQueryPlugin: {
    install: (app: any, options?: VueQueryPluginOptions) => void;
};
export {};
//# sourceMappingURL=vueQueryPlugin.d.ts.map