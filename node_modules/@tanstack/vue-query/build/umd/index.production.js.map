{"version":3,"file":"index.production.js","sources":["../../../query-core/build/lib/subscribable.mjs","../../../query-core/build/lib/utils.mjs","../../../query-core/build/lib/focusManager.mjs","../../../query-core/build/lib/onlineManager.mjs","../../../query-core/build/lib/retryer.mjs","../../../query-core/build/lib/logger.mjs","../../../query-core/build/lib/notifyManager.mjs","../../../query-core/build/lib/removable.mjs","../../../query-core/build/lib/query.mjs","../../../query-core/build/lib/queryCache.mjs","../../../query-core/build/lib/mutation.mjs","../../../query-core/build/lib/mutationCache.mjs","../../../query-core/build/lib/infiniteQueryBehavior.mjs","../../../query-core/build/lib/queryObserver.mjs","../../../query-core/build/lib/queriesObserver.mjs","../../../query-core/build/lib/infiniteQueryObserver.mjs","../../../query-core/build/lib/mutationObserver.mjs","../../../query-core/build/lib/hydration.mjs","../../src/utils.ts","../../src/useQueryClient.ts","../../src/queryCache.ts","../../src/mutationCache.ts","../../src/queryClient.ts","../../../query-core/build/lib/queryClient.mjs","../../src/vueQueryPlugin.ts","../../src/useBaseQuery.ts","../../src/useInfiniteQuery.ts","../../src/useIsFetching.ts","../../src/useIsMutating.ts","../../src/useMutation.ts","../../src/useQueries.ts","../../src/useQuery.ts"],"sourcesContent":["class Subscribable {\n  constructor() {\n    this.listeners = [];\n    this.subscribe = this.subscribe.bind(this);\n  }\n\n  subscribe(listener) {\n    this.listeners.push(listener);\n    this.onSubscribe();\n    return () => {\n      this.listeners = this.listeners.filter(x => x !== listener);\n      this.onUnsubscribe();\n    };\n  }\n\n  hasListeners() {\n    return this.listeners.length > 0;\n  }\n\n  onSubscribe() {// Do nothing\n  }\n\n  onUnsubscribe() {// Do nothing\n  }\n\n}\n\nexport { Subscribable };\n//# sourceMappingURL=subscribable.mjs.map\n","// TYPES\n// UTILS\nconst isServer = typeof window === 'undefined' || 'Deno' in window;\nfunction noop() {\n  return undefined;\n}\nfunction functionalUpdate(updater, input) {\n  return typeof updater === 'function' ? updater(input) : updater;\n}\nfunction isValidTimeout(value) {\n  return typeof value === 'number' && value >= 0 && value !== Infinity;\n}\nfunction difference(array1, array2) {\n  return array1.filter(x => array2.indexOf(x) === -1);\n}\nfunction replaceAt(array, index, value) {\n  const copy = array.slice(0);\n  copy[index] = value;\n  return copy;\n}\nfunction timeUntilStale(updatedAt, staleTime) {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);\n}\nfunction parseQueryArgs(arg1, arg2, arg3) {\n  if (!isQueryKey(arg1)) {\n    return arg1;\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3,\n      queryKey: arg1,\n      queryFn: arg2\n    };\n  }\n\n  return { ...arg2,\n    queryKey: arg1\n  };\n}\nfunction parseMutationArgs(arg1, arg2, arg3) {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return { ...arg3,\n        mutationKey: arg1,\n        mutationFn: arg2\n      };\n    }\n\n    return { ...arg2,\n      mutationKey: arg1\n    };\n  }\n\n  if (typeof arg1 === 'function') {\n    return { ...arg2,\n      mutationFn: arg1\n    };\n  }\n\n  return { ...arg1\n  };\n}\nfunction parseFilterArgs(arg1, arg2, arg3) {\n  return isQueryKey(arg1) ? [{ ...arg2,\n    queryKey: arg1\n  }, arg3] : [arg1 || {}, arg2];\n}\nfunction parseMutationFilterArgs(arg1, arg2, arg3) {\n  return isQueryKey(arg1) ? [{ ...arg2,\n    mutationKey: arg1\n  }, arg3] : [arg1 || {}, arg2];\n}\nfunction matchQuery(filters, query) {\n  const {\n    type = 'all',\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale\n  } = filters;\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false;\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false;\n    }\n  }\n\n  if (type !== 'all') {\n    const isActive = query.isActive();\n\n    if (type === 'active' && !isActive) {\n      return false;\n    }\n\n    if (type === 'inactive' && isActive) {\n      return false;\n    }\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false;\n  }\n\n  if (typeof fetchStatus !== 'undefined' && fetchStatus !== query.state.fetchStatus) {\n    return false;\n  }\n\n  if (predicate && !predicate(query)) {\n    return false;\n  }\n\n  return true;\n}\nfunction matchMutation(filters, mutation) {\n  const {\n    exact,\n    fetching,\n    predicate,\n    mutationKey\n  } = filters;\n\n  if (isQueryKey(mutationKey)) {\n    if (!mutation.options.mutationKey) {\n      return false;\n    }\n\n    if (exact) {\n      if (hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)) {\n        return false;\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false;\n    }\n  }\n\n  if (typeof fetching === 'boolean' && mutation.state.status === 'loading' !== fetching) {\n    return false;\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false;\n  }\n\n  return true;\n}\nfunction hashQueryKeyByOptions(queryKey, options) {\n  const hashFn = (options == null ? void 0 : options.queryKeyHashFn) || hashQueryKey;\n  return hashFn(queryKey);\n}\n/**\n * Default query keys hash function.\n * Hashes the value into a stable hash.\n */\n\nfunction hashQueryKey(queryKey) {\n  return JSON.stringify(queryKey, (_, val) => isPlainObject(val) ? Object.keys(val).sort().reduce((result, key) => {\n    result[key] = val[key];\n    return result;\n  }, {}) : val);\n}\n/**\n * Checks if key `b` partially matches with key `a`.\n */\n\nfunction partialMatchKey(a, b) {\n  return partialDeepEqual(a, b);\n}\n/**\n * Checks if `b` partially matches with `a`.\n */\n\nfunction partialDeepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (typeof a !== typeof b) {\n    return false;\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some(key => !partialDeepEqual(a[key], b[key]));\n  }\n\n  return false;\n}\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\n\nfunction replaceEqualDeep(a, b) {\n  if (a === b) {\n    return a;\n  }\n\n  const array = isPlainArray(a) && isPlainArray(b);\n\n  if (array || isPlainObject(a) && isPlainObject(b)) {\n    const aSize = array ? a.length : Object.keys(a).length;\n    const bItems = array ? b : Object.keys(b);\n    const bSize = bItems.length;\n    const copy = array ? [] : {};\n    let equalItems = 0;\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i];\n      copy[key] = replaceEqualDeep(a[key], b[key]);\n\n      if (copy[key] === a[key]) {\n        equalItems++;\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy;\n  }\n\n  return b;\n}\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\n\nfunction shallowEqualObjects(a, b) {\n  if (a && !b || b && !a) {\n    return false;\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false;\n    }\n  }\n\n  return true;\n}\nfunction isPlainArray(value) {\n  return Array.isArray(value) && value.length === Object.keys(value).length;\n} // Copied from: https://github.com/jonschlinkert/is-plain-object\n\nfunction isPlainObject(o) {\n  if (!hasObjectPrototype(o)) {\n    return false;\n  } // If has modified constructor\n\n\n  const ctor = o.constructor;\n\n  if (typeof ctor === 'undefined') {\n    return true;\n  } // If has modified prototype\n\n\n  const prot = ctor.prototype;\n\n  if (!hasObjectPrototype(prot)) {\n    return false;\n  } // If constructor does not have an Object-specific method\n\n\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false;\n  } // Most likely a plain Object\n\n\n  return true;\n}\n\nfunction hasObjectPrototype(o) {\n  return Object.prototype.toString.call(o) === '[object Object]';\n}\n\nfunction isQueryKey(value) {\n  return Array.isArray(value);\n}\nfunction isError(value) {\n  return value instanceof Error;\n}\nfunction sleep(timeout) {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout);\n  });\n}\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\n\nfunction scheduleMicrotask(callback) {\n  sleep(0).then(callback);\n}\nfunction getAbortController() {\n  if (typeof AbortController === 'function') {\n    return new AbortController();\n  }\n\n  return;\n}\nfunction replaceData(prevData, data, options) {\n  // Use prev data if an isDataEqual function is defined and returns `true`\n  if (options.isDataEqual != null && options.isDataEqual(prevData, data)) {\n    return prevData;\n  } else if (typeof options.structuralSharing === 'function') {\n    return options.structuralSharing(prevData, data);\n  } else if (options.structuralSharing !== false) {\n    // Structurally share data between prev and new data if needed\n    return replaceEqualDeep(prevData, data);\n  }\n\n  return data;\n}\n\nexport { difference, functionalUpdate, getAbortController, hashQueryKey, hashQueryKeyByOptions, isError, isPlainArray, isPlainObject, isQueryKey, isServer, isValidTimeout, matchMutation, matchQuery, noop, parseFilterArgs, parseMutationArgs, parseMutationFilterArgs, parseQueryArgs, partialDeepEqual, partialMatchKey, replaceAt, replaceData, replaceEqualDeep, scheduleMicrotask, shallowEqualObjects, sleep, timeUntilStale };\n//# sourceMappingURL=utils.mjs.map\n","import { Subscribable } from './subscribable.mjs';\nimport { isServer } from './utils.mjs';\n\nclass FocusManager extends Subscribable {\n  constructor() {\n    super();\n\n    this.setup = onFocus => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus(); // Listen to visibillitychange and focus\n\n\n        window.addEventListener('visibilitychange', listener, false);\n        window.addEventListener('focus', listener, false);\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener);\n          window.removeEventListener('focus', listener);\n        };\n      }\n\n      return;\n    };\n  }\n\n  onSubscribe() {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup);\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _this$cleanup;\n\n      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n      this.cleanup = undefined;\n    }\n  }\n\n  setEventListener(setup) {\n    var _this$cleanup2;\n\n    this.setup = setup;\n    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n    this.cleanup = setup(focused => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused);\n      } else {\n        this.onFocus();\n      }\n    });\n  }\n\n  setFocused(focused) {\n    this.focused = focused;\n\n    if (focused) {\n      this.onFocus();\n    }\n  }\n\n  onFocus() {\n    this.listeners.forEach(listener => {\n      listener();\n    });\n  }\n\n  isFocused() {\n    if (typeof this.focused === 'boolean') {\n      return this.focused;\n    } // document global can be unavailable in react native\n\n\n    if (typeof document === 'undefined') {\n      return true;\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(document.visibilityState);\n  }\n\n}\nconst focusManager = new FocusManager();\n\nexport { FocusManager, focusManager };\n//# sourceMappingURL=focusManager.mjs.map\n","import { Subscribable } from './subscribable.mjs';\nimport { isServer } from './utils.mjs';\n\nclass OnlineManager extends Subscribable {\n  constructor() {\n    super();\n\n    this.setup = onOnline => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onOnline(); // Listen to online\n\n\n        window.addEventListener('online', listener, false);\n        window.addEventListener('offline', listener, false);\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', listener);\n          window.removeEventListener('offline', listener);\n        };\n      }\n\n      return;\n    };\n  }\n\n  onSubscribe() {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup);\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _this$cleanup;\n\n      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n      this.cleanup = undefined;\n    }\n  }\n\n  setEventListener(setup) {\n    var _this$cleanup2;\n\n    this.setup = setup;\n    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n    this.cleanup = setup(online => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online);\n      } else {\n        this.onOnline();\n      }\n    });\n  }\n\n  setOnline(online) {\n    this.online = online;\n\n    if (online) {\n      this.onOnline();\n    }\n  }\n\n  onOnline() {\n    this.listeners.forEach(listener => {\n      listener();\n    });\n  }\n\n  isOnline() {\n    if (typeof this.online === 'boolean') {\n      return this.online;\n    }\n\n    if (typeof navigator === 'undefined' || typeof navigator.onLine === 'undefined') {\n      return true;\n    }\n\n    return navigator.onLine;\n  }\n\n}\nconst onlineManager = new OnlineManager();\n\nexport { OnlineManager, onlineManager };\n//# sourceMappingURL=onlineManager.mjs.map\n","import { focusManager } from './focusManager.mjs';\nimport { onlineManager } from './onlineManager.mjs';\nimport { sleep } from './utils.mjs';\n\nfunction defaultRetryDelay(failureCount) {\n  return Math.min(1000 * 2 ** failureCount, 30000);\n}\n\nfunction canFetch(networkMode) {\n  return (networkMode != null ? networkMode : 'online') === 'online' ? onlineManager.isOnline() : true;\n}\nclass CancelledError {\n  constructor(options) {\n    this.revert = options == null ? void 0 : options.revert;\n    this.silent = options == null ? void 0 : options.silent;\n  }\n\n}\nfunction isCancelledError(value) {\n  return value instanceof CancelledError;\n}\nfunction createRetryer(config) {\n  let isRetryCancelled = false;\n  let failureCount = 0;\n  let isResolved = false;\n  let continueFn;\n  let promiseResolve;\n  let promiseReject;\n  const promise = new Promise((outerResolve, outerReject) => {\n    promiseResolve = outerResolve;\n    promiseReject = outerReject;\n  });\n\n  const cancel = cancelOptions => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions));\n      config.abort == null ? void 0 : config.abort();\n    }\n  };\n\n  const cancelRetry = () => {\n    isRetryCancelled = true;\n  };\n\n  const continueRetry = () => {\n    isRetryCancelled = false;\n  };\n\n  const shouldPause = () => !focusManager.isFocused() || config.networkMode !== 'always' && !onlineManager.isOnline();\n\n  const resolve = value => {\n    if (!isResolved) {\n      isResolved = true;\n      config.onSuccess == null ? void 0 : config.onSuccess(value);\n      continueFn == null ? void 0 : continueFn();\n      promiseResolve(value);\n    }\n  };\n\n  const reject = value => {\n    if (!isResolved) {\n      isResolved = true;\n      config.onError == null ? void 0 : config.onError(value);\n      continueFn == null ? void 0 : continueFn();\n      promiseReject(value);\n    }\n  };\n\n  const pause = () => {\n    return new Promise(continueResolve => {\n      continueFn = value => {\n        const canContinue = isResolved || !shouldPause();\n\n        if (canContinue) {\n          continueResolve(value);\n        }\n\n        return canContinue;\n      };\n\n      config.onPause == null ? void 0 : config.onPause();\n    }).then(() => {\n      continueFn = undefined;\n\n      if (!isResolved) {\n        config.onContinue == null ? void 0 : config.onContinue();\n      }\n    });\n  }; // Create loop function\n\n\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return;\n    }\n\n    let promiseOrValue; // Execute query\n\n    try {\n      promiseOrValue = config.fn();\n    } catch (error) {\n      promiseOrValue = Promise.reject(error);\n    }\n\n    Promise.resolve(promiseOrValue).then(resolve).catch(error => {\n      var _config$retry, _config$retryDelay;\n\n      // Stop if the fetch is already resolved\n      if (isResolved) {\n        return;\n      } // Do we need to retry the request?\n\n\n      const retry = (_config$retry = config.retry) != null ? _config$retry : 3;\n      const retryDelay = (_config$retryDelay = config.retryDelay) != null ? _config$retryDelay : defaultRetryDelay;\n      const delay = typeof retryDelay === 'function' ? retryDelay(failureCount, error) : retryDelay;\n      const shouldRetry = retry === true || typeof retry === 'number' && failureCount < retry || typeof retry === 'function' && retry(failureCount, error);\n\n      if (isRetryCancelled || !shouldRetry) {\n        // We are done if the query does not need to be retried\n        reject(error);\n        return;\n      }\n\n      failureCount++; // Notify on fail\n\n      config.onFail == null ? void 0 : config.onFail(failureCount, error); // Delay\n\n      sleep(delay) // Pause if the document is not visible or when the device is offline\n      .then(() => {\n        if (shouldPause()) {\n          return pause();\n        }\n\n        return;\n      }).then(() => {\n        if (isRetryCancelled) {\n          reject(error);\n        } else {\n          run();\n        }\n      });\n    });\n  }; // Start loop\n\n\n  if (canFetch(config.networkMode)) {\n    run();\n  } else {\n    pause().then(run);\n  }\n\n  return {\n    promise,\n    cancel,\n    continue: () => {\n      const didContinue = continueFn == null ? void 0 : continueFn();\n      return didContinue ? promise : Promise.resolve();\n    },\n    cancelRetry,\n    continueRetry\n  };\n}\n\nexport { CancelledError, canFetch, createRetryer, isCancelledError };\n//# sourceMappingURL=retryer.mjs.map\n","const defaultLogger = console;\n\nexport { defaultLogger };\n//# sourceMappingURL=logger.mjs.map\n","import { scheduleMicrotask } from './utils.mjs';\n\nfunction createNotifyManager() {\n  let queue = [];\n  let transactions = 0;\n\n  let notifyFn = callback => {\n    callback();\n  };\n\n  let batchNotifyFn = callback => {\n    callback();\n  };\n\n  const batch = callback => {\n    let result;\n    transactions++;\n\n    try {\n      result = callback();\n    } finally {\n      transactions--;\n\n      if (!transactions) {\n        flush();\n      }\n    }\n\n    return result;\n  };\n\n  const schedule = callback => {\n    if (transactions) {\n      queue.push(callback);\n    } else {\n      scheduleMicrotask(() => {\n        notifyFn(callback);\n      });\n    }\n  };\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n\n\n  const batchCalls = callback => {\n    return (...args) => {\n      schedule(() => {\n        callback(...args);\n      });\n    };\n  };\n\n  const flush = () => {\n    const originalQueue = queue;\n    queue = [];\n\n    if (originalQueue.length) {\n      scheduleMicrotask(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach(callback => {\n            notifyFn(callback);\n          });\n        });\n      });\n    }\n  };\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n\n\n  const setNotifyFunction = fn => {\n    notifyFn = fn;\n  };\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n\n\n  const setBatchNotifyFunction = fn => {\n    batchNotifyFn = fn;\n  };\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction\n  };\n} // SINGLETON\n\nconst notifyManager = createNotifyManager();\n\nexport { createNotifyManager, notifyManager };\n//# sourceMappingURL=notifyManager.mjs.map\n","import { isValidTimeout, isServer } from './utils.mjs';\n\nclass Removable {\n  destroy() {\n    this.clearGcTimeout();\n  }\n\n  scheduleGc() {\n    this.clearGcTimeout();\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove();\n      }, this.cacheTime);\n    }\n  }\n\n  updateCacheTime(newCacheTime) {\n    // Default to 5 minutes (Infinity for server-side) if no cache time is set\n    this.cacheTime = Math.max(this.cacheTime || 0, newCacheTime != null ? newCacheTime : isServer ? Infinity : 5 * 60 * 1000);\n  }\n\n  clearGcTimeout() {\n    if (this.gcTimeout) {\n      clearTimeout(this.gcTimeout);\n      this.gcTimeout = undefined;\n    }\n  }\n\n}\n\nexport { Removable };\n//# sourceMappingURL=removable.mjs.map\n","import { replaceData, noop, timeUntilStale, getAbortController } from './utils.mjs';\nimport { defaultLogger } from './logger.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { createRetryer, isCancelledError, canFetch } from './retryer.mjs';\nimport { Removable } from './removable.mjs';\n\n// CLASS\nclass Query extends Removable {\n  constructor(config) {\n    super();\n    this.abortSignalConsumed = false;\n    this.defaultOptions = config.defaultOptions;\n    this.setOptions(config.options);\n    this.observers = [];\n    this.cache = config.cache;\n    this.logger = config.logger || defaultLogger;\n    this.queryKey = config.queryKey;\n    this.queryHash = config.queryHash;\n    this.initialState = config.state || getDefaultState(this.options);\n    this.state = this.initialState;\n    this.scheduleGc();\n  }\n\n  get meta() {\n    return this.options.meta;\n  }\n\n  setOptions(options) {\n    this.options = { ...this.defaultOptions,\n      ...options\n    };\n    this.updateCacheTime(this.options.cacheTime);\n  }\n\n  optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === 'idle') {\n      this.cache.remove(this);\n    }\n  }\n\n  setData(newData, options) {\n    const data = replaceData(this.state.data, newData, this.options); // Set data and mark it as cached\n\n    this.dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options == null ? void 0 : options.updatedAt,\n      manual: options == null ? void 0 : options.manual\n    });\n    return data;\n  }\n\n  setState(state, setStateOptions) {\n    this.dispatch({\n      type: 'setState',\n      state,\n      setStateOptions\n    });\n  }\n\n  cancel(options) {\n    var _this$retryer;\n\n    const promise = this.promise;\n    (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.cancel(options);\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve();\n  }\n\n  destroy() {\n    super.destroy();\n    this.cancel({\n      silent: true\n    });\n  }\n\n  reset() {\n    this.destroy();\n    this.setState(this.initialState);\n  }\n\n  isActive() {\n    return this.observers.some(observer => observer.options.enabled !== false);\n  }\n\n  isDisabled() {\n    return this.getObserversCount() > 0 && !this.isActive();\n  }\n\n  isStale() {\n    return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some(observer => observer.getCurrentResult().isStale);\n  }\n\n  isStaleByTime(staleTime = 0) {\n    return this.state.isInvalidated || !this.state.dataUpdatedAt || !timeUntilStale(this.state.dataUpdatedAt, staleTime);\n  }\n\n  onFocus() {\n    var _this$retryer2;\n\n    const observer = this.observers.find(x => x.shouldFetchOnWindowFocus());\n\n    if (observer) {\n      observer.refetch({\n        cancelRefetch: false\n      });\n    } // Continue fetch if currently paused\n\n\n    (_this$retryer2 = this.retryer) == null ? void 0 : _this$retryer2.continue();\n  }\n\n  onOnline() {\n    var _this$retryer3;\n\n    const observer = this.observers.find(x => x.shouldFetchOnReconnect());\n\n    if (observer) {\n      observer.refetch({\n        cancelRefetch: false\n      });\n    } // Continue fetch if currently paused\n\n\n    (_this$retryer3 = this.retryer) == null ? void 0 : _this$retryer3.continue();\n  }\n\n  addObserver(observer) {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer); // Stop the query from being garbage collected\n\n      this.clearGcTimeout();\n      this.cache.notify({\n        type: 'observerAdded',\n        query: this,\n        observer\n      });\n    }\n  }\n\n  removeObserver(observer) {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter(x => x !== observer);\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.abortSignalConsumed) {\n            this.retryer.cancel({\n              revert: true\n            });\n          } else {\n            this.retryer.cancelRetry();\n          }\n        }\n\n        this.scheduleGc();\n      }\n\n      this.cache.notify({\n        type: 'observerRemoved',\n        query: this,\n        observer\n      });\n    }\n  }\n\n  getObserversCount() {\n    return this.observers.length;\n  }\n\n  invalidate() {\n    if (!this.state.isInvalidated) {\n      this.dispatch({\n        type: 'invalidate'\n      });\n    }\n  }\n\n  fetch(options, fetchOptions) {\n    var _this$options$behavio, _context$fetchOptions;\n\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.dataUpdatedAt && fetchOptions != null && fetchOptions.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({\n          silent: true\n        });\n      } else if (this.promise) {\n        var _this$retryer4;\n\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        (_this$retryer4 = this.retryer) == null ? void 0 : _this$retryer4.continueRetry(); // Return current promise if we are already fetching\n\n        return this.promise;\n      }\n    } // Update config if passed, otherwise the config from the last execution is used\n\n\n    if (options) {\n      this.setOptions(options);\n    } // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n\n\n    if (!this.options.queryFn) {\n      const observer = this.observers.find(x => x.options.queryFn);\n\n      if (observer) {\n        this.setOptions(observer.options);\n      }\n    }\n\n    if (!Array.isArray(this.options.queryKey)) {\n      if (process.env.NODE_ENV !== 'production') {\n        this.logger.error(\"As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']\");\n      }\n    }\n\n    const abortController = getAbortController(); // Create query function context\n\n    const queryFnContext = {\n      queryKey: this.queryKey,\n      pageParam: undefined,\n      meta: this.meta\n    }; // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n\n    const addSignalProperty = object => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          if (abortController) {\n            this.abortSignalConsumed = true;\n            return abortController.signal;\n          }\n\n          return undefined;\n        }\n      });\n    };\n\n    addSignalProperty(queryFnContext); // Create fetch function\n\n    const fetchFn = () => {\n      if (!this.options.queryFn) {\n        return Promise.reject('Missing queryFn');\n      }\n\n      this.abortSignalConsumed = false;\n      return this.options.queryFn(queryFnContext);\n    }; // Trigger behavior hook\n\n\n    const context = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      state: this.state,\n      fetchFn\n    };\n    addSignalProperty(context);\n    (_this$options$behavio = this.options.behavior) == null ? void 0 : _this$options$behavio.onFetch(context); // Store state in case the current fetch needs to be reverted\n\n    this.revertState = this.state; // Set to fetching state if not already in it\n\n    if (this.state.fetchStatus === 'idle' || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) == null ? void 0 : _context$fetchOptions.meta)) {\n      var _context$fetchOptions2;\n\n      this.dispatch({\n        type: 'fetch',\n        meta: (_context$fetchOptions2 = context.fetchOptions) == null ? void 0 : _context$fetchOptions2.meta\n      });\n    }\n\n    const onError = error => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.dispatch({\n          type: 'error',\n          error: error\n        });\n      }\n\n      if (!isCancelledError(error)) {\n        var _this$cache$config$on, _this$cache$config, _this$cache$config$on2, _this$cache$config2;\n\n        // Notify cache callback\n        (_this$cache$config$on = (_this$cache$config = this.cache.config).onError) == null ? void 0 : _this$cache$config$on.call(_this$cache$config, error, this);\n        (_this$cache$config$on2 = (_this$cache$config2 = this.cache.config).onSettled) == null ? void 0 : _this$cache$config$on2.call(_this$cache$config2, this.state.data, error, this);\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error);\n        }\n      }\n\n      if (!this.isFetchingOptimistic) {\n        // Schedule query gc after fetching\n        this.scheduleGc();\n      }\n\n      this.isFetchingOptimistic = false;\n    }; // Try to fetch the data\n\n\n    this.retryer = createRetryer({\n      fn: context.fetchFn,\n      abort: abortController == null ? void 0 : abortController.abort.bind(abortController),\n      onSuccess: data => {\n        var _this$cache$config$on3, _this$cache$config3, _this$cache$config$on4, _this$cache$config4;\n\n        if (typeof data === 'undefined') {\n          if (process.env.NODE_ENV !== 'production') {\n            this.logger.error(\"Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: \" + this.queryHash);\n          }\n\n          onError(new Error(this.queryHash + \" data is undefined\"));\n          return;\n        }\n\n        this.setData(data); // Notify cache callback\n\n        (_this$cache$config$on3 = (_this$cache$config3 = this.cache.config).onSuccess) == null ? void 0 : _this$cache$config$on3.call(_this$cache$config3, data, this);\n        (_this$cache$config$on4 = (_this$cache$config4 = this.cache.config).onSettled) == null ? void 0 : _this$cache$config$on4.call(_this$cache$config4, data, this.state.error, this);\n\n        if (!this.isFetchingOptimistic) {\n          // Schedule query gc after fetching\n          this.scheduleGc();\n        }\n\n        this.isFetchingOptimistic = false;\n      },\n      onError,\n      onFail: (failureCount, error) => {\n        this.dispatch({\n          type: 'failed',\n          failureCount,\n          error\n        });\n      },\n      onPause: () => {\n        this.dispatch({\n          type: 'pause'\n        });\n      },\n      onContinue: () => {\n        this.dispatch({\n          type: 'continue'\n        });\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode\n    });\n    this.promise = this.retryer.promise;\n    return this.promise;\n  }\n\n  dispatch(action) {\n    const reducer = state => {\n      var _action$meta, _action$dataUpdatedAt;\n\n      switch (action.type) {\n        case 'failed':\n          return { ...state,\n            fetchFailureCount: action.failureCount,\n            fetchFailureReason: action.error\n          };\n\n        case 'pause':\n          return { ...state,\n            fetchStatus: 'paused'\n          };\n\n        case 'continue':\n          return { ...state,\n            fetchStatus: 'fetching'\n          };\n\n        case 'fetch':\n          return { ...state,\n            fetchFailureCount: 0,\n            fetchFailureReason: null,\n            fetchMeta: (_action$meta = action.meta) != null ? _action$meta : null,\n            fetchStatus: canFetch(this.options.networkMode) ? 'fetching' : 'paused',\n            ...(!state.dataUpdatedAt && {\n              error: null,\n              status: 'loading'\n            })\n          };\n\n        case 'success':\n          return { ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) != null ? _action$dataUpdatedAt : Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success',\n            ...(!action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0,\n              fetchFailureReason: null\n            })\n          };\n\n        case 'error':\n          const error = action.error;\n\n          if (isCancelledError(error) && error.revert && this.revertState) {\n            return { ...this.revertState\n            };\n          }\n\n          return { ...state,\n            error: error,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchFailureReason: error,\n            fetchStatus: 'idle',\n            status: 'error'\n          };\n\n        case 'invalidate':\n          return { ...state,\n            isInvalidated: true\n          };\n\n        case 'setState':\n          return { ...state,\n            ...action.state\n          };\n      }\n    };\n\n    this.state = reducer(this.state);\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onQueryUpdate(action);\n      });\n      this.cache.notify({\n        query: this,\n        type: 'updated',\n        action\n      });\n    });\n  }\n\n}\n\nfunction getDefaultState(options) {\n  const data = typeof options.initialData === 'function' ? options.initialData() : options.initialData;\n  const hasData = typeof data !== 'undefined';\n  const initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === 'function' ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt != null ? initialDataUpdatedAt : Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'loading',\n    fetchStatus: 'idle'\n  };\n}\n\nexport { Query };\n//# sourceMappingURL=query.mjs.map\n","import { hashQueryKeyByOptions, parseFilterArgs, matchQuery } from './utils.mjs';\nimport { Query } from './query.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { Subscribable } from './subscribable.mjs';\n\n// CLASS\nclass QueryCache extends Subscribable {\n  constructor(config) {\n    super();\n    this.config = config || {};\n    this.queries = [];\n    this.queriesMap = {};\n  }\n\n  build(client, options, state) {\n    var _options$queryHash;\n\n    const queryKey = options.queryKey;\n    const queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : hashQueryKeyByOptions(queryKey, options);\n    let query = this.get(queryHash);\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        logger: client.getLogger(),\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey)\n      });\n      this.add(query);\n    }\n\n    return query;\n  }\n\n  add(query) {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query;\n      this.queries.push(query);\n      this.notify({\n        type: 'added',\n        query\n      });\n    }\n  }\n\n  remove(query) {\n    const queryInMap = this.queriesMap[query.queryHash];\n\n    if (queryInMap) {\n      query.destroy();\n      this.queries = this.queries.filter(x => x !== query);\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash];\n      }\n\n      this.notify({\n        type: 'removed',\n        query\n      });\n    }\n  }\n\n  clear() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        this.remove(query);\n      });\n    });\n  }\n\n  get(queryHash) {\n    return this.queriesMap[queryHash];\n  }\n\n  getAll() {\n    return this.queries;\n  }\n\n  find(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true;\n    }\n\n    return this.queries.find(query => matchQuery(filters, query));\n  }\n\n  findAll(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    return Object.keys(filters).length > 0 ? this.queries.filter(query => matchQuery(filters, query)) : this.queries;\n  }\n\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event);\n      });\n    });\n  }\n\n  onFocus() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onFocus();\n      });\n    });\n  }\n\n  onOnline() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onOnline();\n      });\n    });\n  }\n\n}\n\nexport { QueryCache };\n//# sourceMappingURL=queryCache.mjs.map\n","import { defaultLogger } from './logger.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { Removable } from './removable.mjs';\nimport { createRetryer, canFetch } from './retryer.mjs';\n\n// CLASS\nclass Mutation extends Removable {\n  constructor(config) {\n    super();\n    this.defaultOptions = config.defaultOptions;\n    this.mutationId = config.mutationId;\n    this.mutationCache = config.mutationCache;\n    this.logger = config.logger || defaultLogger;\n    this.observers = [];\n    this.state = config.state || getDefaultState();\n    this.setOptions(config.options);\n    this.scheduleGc();\n  }\n\n  setOptions(options) {\n    this.options = { ...this.defaultOptions,\n      ...options\n    };\n    this.updateCacheTime(this.options.cacheTime);\n  }\n\n  get meta() {\n    return this.options.meta;\n  }\n\n  setState(state) {\n    this.dispatch({\n      type: 'setState',\n      state\n    });\n  }\n\n  addObserver(observer) {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer); // Stop the mutation from being garbage collected\n\n      this.clearGcTimeout();\n      this.mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer\n      });\n    }\n  }\n\n  removeObserver(observer) {\n    this.observers = this.observers.filter(x => x !== observer);\n    this.scheduleGc();\n    this.mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer\n    });\n  }\n\n  optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.status === 'loading') {\n        this.scheduleGc();\n      } else {\n        this.mutationCache.remove(this);\n      }\n    }\n  }\n\n  continue() {\n    var _this$retryer$continu, _this$retryer;\n\n    return (_this$retryer$continu = (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.continue()) != null ? _this$retryer$continu : this.execute();\n  }\n\n  async execute() {\n    const executeMutation = () => {\n      var _this$options$retry;\n\n      this.retryer = createRetryer({\n        fn: () => {\n          if (!this.options.mutationFn) {\n            return Promise.reject('No mutationFn found');\n          }\n\n          return this.options.mutationFn(this.state.variables);\n        },\n        onFail: (failureCount, error) => {\n          this.dispatch({\n            type: 'failed',\n            failureCount,\n            error\n          });\n        },\n        onPause: () => {\n          this.dispatch({\n            type: 'pause'\n          });\n        },\n        onContinue: () => {\n          this.dispatch({\n            type: 'continue'\n          });\n        },\n        retry: (_this$options$retry = this.options.retry) != null ? _this$options$retry : 0,\n        retryDelay: this.options.retryDelay,\n        networkMode: this.options.networkMode\n      });\n      return this.retryer.promise;\n    };\n\n    const restored = this.state.status === 'loading';\n\n    try {\n      var _this$mutationCache$c3, _this$mutationCache$c4, _this$options$onSucce, _this$options2, _this$mutationCache$c5, _this$mutationCache$c6, _this$options$onSettl, _this$options3;\n\n      if (!restored) {\n        var _this$mutationCache$c, _this$mutationCache$c2, _this$options$onMutat, _this$options;\n\n        this.dispatch({\n          type: 'loading',\n          variables: this.options.variables\n        }); // Notify cache callback\n\n        await ((_this$mutationCache$c = (_this$mutationCache$c2 = this.mutationCache.config).onMutate) == null ? void 0 : _this$mutationCache$c.call(_this$mutationCache$c2, this.state.variables, this));\n        const context = await ((_this$options$onMutat = (_this$options = this.options).onMutate) == null ? void 0 : _this$options$onMutat.call(_this$options, this.state.variables));\n\n        if (context !== this.state.context) {\n          this.dispatch({\n            type: 'loading',\n            context,\n            variables: this.state.variables\n          });\n        }\n      }\n\n      const data = await executeMutation(); // Notify cache callback\n\n      await ((_this$mutationCache$c3 = (_this$mutationCache$c4 = this.mutationCache.config).onSuccess) == null ? void 0 : _this$mutationCache$c3.call(_this$mutationCache$c4, data, this.state.variables, this.state.context, this));\n      await ((_this$options$onSucce = (_this$options2 = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options2, data, this.state.variables, this.state.context)); // Notify cache callback\n\n      await ((_this$mutationCache$c5 = (_this$mutationCache$c6 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c5.call(_this$mutationCache$c6, data, null, this.state.variables, this.state.context, this));\n      await ((_this$options$onSettl = (_this$options3 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options3, data, null, this.state.variables, this.state.context));\n      this.dispatch({\n        type: 'success',\n        data\n      });\n      return data;\n    } catch (error) {\n      try {\n        var _this$mutationCache$c7, _this$mutationCache$c8, _this$options$onError, _this$options4, _this$mutationCache$c9, _this$mutationCache$c10, _this$options$onSettl2, _this$options5;\n\n        // Notify cache callback\n        await ((_this$mutationCache$c7 = (_this$mutationCache$c8 = this.mutationCache.config).onError) == null ? void 0 : _this$mutationCache$c7.call(_this$mutationCache$c8, error, this.state.variables, this.state.context, this));\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error);\n        }\n\n        await ((_this$options$onError = (_this$options4 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options4, error, this.state.variables, this.state.context)); // Notify cache callback\n\n        await ((_this$mutationCache$c9 = (_this$mutationCache$c10 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c9.call(_this$mutationCache$c10, undefined, error, this.state.variables, this.state.context, this));\n        await ((_this$options$onSettl2 = (_this$options5 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options5, undefined, error, this.state.variables, this.state.context));\n        throw error;\n      } finally {\n        this.dispatch({\n          type: 'error',\n          error: error\n        });\n      }\n    }\n  }\n\n  dispatch(action) {\n    const reducer = state => {\n      switch (action.type) {\n        case 'failed':\n          return { ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error\n          };\n\n        case 'pause':\n          return { ...state,\n            isPaused: true\n          };\n\n        case 'continue':\n          return { ...state,\n            isPaused: false\n          };\n\n        case 'loading':\n          return { ...state,\n            context: action.context,\n            data: undefined,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: !canFetch(this.options.networkMode),\n            status: 'loading',\n            variables: action.variables\n          };\n\n        case 'success':\n          return { ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: 'success',\n            isPaused: false\n          };\n\n        case 'error':\n          return { ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: 'error'\n          };\n\n        case 'setState':\n          return { ...state,\n            ...action.state\n          };\n      }\n    };\n\n    this.state = reducer(this.state);\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onMutationUpdate(action);\n      });\n      this.mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action\n      });\n    });\n  }\n\n}\nfunction getDefaultState() {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined\n  };\n}\n\nexport { Mutation, getDefaultState };\n//# sourceMappingURL=mutation.mjs.map\n","import { notifyManager } from './notifyManager.mjs';\nimport { Mutation } from './mutation.mjs';\nimport { matchMutation, noop } from './utils.mjs';\nimport { Subscribable } from './subscribable.mjs';\n\n// CLASS\nclass MutationCache extends Subscribable {\n  constructor(config) {\n    super();\n    this.config = config || {};\n    this.mutations = [];\n    this.mutationId = 0;\n  }\n\n  build(client, options, state) {\n    const mutation = new Mutation({\n      mutationCache: this,\n      logger: client.getLogger(),\n      mutationId: ++this.mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n      defaultOptions: options.mutationKey ? client.getMutationDefaults(options.mutationKey) : undefined\n    });\n    this.add(mutation);\n    return mutation;\n  }\n\n  add(mutation) {\n    this.mutations.push(mutation);\n    this.notify({\n      type: 'added',\n      mutation\n    });\n  }\n\n  remove(mutation) {\n    this.mutations = this.mutations.filter(x => x !== mutation);\n    this.notify({\n      type: 'removed',\n      mutation\n    });\n  }\n\n  clear() {\n    notifyManager.batch(() => {\n      this.mutations.forEach(mutation => {\n        this.remove(mutation);\n      });\n    });\n  }\n\n  getAll() {\n    return this.mutations;\n  }\n\n  find(filters) {\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true;\n    }\n\n    return this.mutations.find(mutation => matchMutation(filters, mutation));\n  }\n\n  findAll(filters) {\n    return this.mutations.filter(mutation => matchMutation(filters, mutation));\n  }\n\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event);\n      });\n    });\n  }\n\n  resumePausedMutations() {\n    var _this$resuming;\n\n    this.resuming = ((_this$resuming = this.resuming) != null ? _this$resuming : Promise.resolve()).then(() => {\n      const pausedMutations = this.mutations.filter(x => x.state.isPaused);\n      return notifyManager.batch(() => pausedMutations.reduce((promise, mutation) => promise.then(() => mutation.continue().catch(noop)), Promise.resolve()));\n    }).then(() => {\n      this.resuming = undefined;\n    });\n    return this.resuming;\n  }\n\n}\n\nexport { MutationCache };\n//# sourceMappingURL=mutationCache.mjs.map\n","function infiniteQueryBehavior() {\n  return {\n    onFetch: context => {\n      context.fetchFn = () => {\n        var _context$fetchOptions, _context$fetchOptions2, _context$fetchOptions3, _context$fetchOptions4, _context$state$data, _context$state$data2;\n\n        const refetchPage = (_context$fetchOptions = context.fetchOptions) == null ? void 0 : (_context$fetchOptions2 = _context$fetchOptions.meta) == null ? void 0 : _context$fetchOptions2.refetchPage;\n        const fetchMore = (_context$fetchOptions3 = context.fetchOptions) == null ? void 0 : (_context$fetchOptions4 = _context$fetchOptions3.meta) == null ? void 0 : _context$fetchOptions4.fetchMore;\n        const pageParam = fetchMore == null ? void 0 : fetchMore.pageParam;\n        const isFetchingNextPage = (fetchMore == null ? void 0 : fetchMore.direction) === 'forward';\n        const isFetchingPreviousPage = (fetchMore == null ? void 0 : fetchMore.direction) === 'backward';\n        const oldPages = ((_context$state$data = context.state.data) == null ? void 0 : _context$state$data.pages) || [];\n        const oldPageParams = ((_context$state$data2 = context.state.data) == null ? void 0 : _context$state$data2.pageParams) || [];\n        let newPageParams = oldPageParams;\n        let cancelled = false;\n\n        const addSignalProperty = object => {\n          Object.defineProperty(object, 'signal', {\n            enumerable: true,\n            get: () => {\n              var _context$signal;\n\n              if ((_context$signal = context.signal) != null && _context$signal.aborted) {\n                cancelled = true;\n              } else {\n                var _context$signal2;\n\n                (_context$signal2 = context.signal) == null ? void 0 : _context$signal2.addEventListener('abort', () => {\n                  cancelled = true;\n                });\n              }\n\n              return context.signal;\n            }\n          });\n        }; // Get query function\n\n\n        const queryFn = context.options.queryFn || (() => Promise.reject('Missing queryFn'));\n\n        const buildNewPages = (pages, param, page, previous) => {\n          newPageParams = previous ? [param, ...newPageParams] : [...newPageParams, param];\n          return previous ? [page, ...pages] : [...pages, page];\n        }; // Create function to fetch a page\n\n\n        const fetchPage = (pages, manual, param, previous) => {\n          if (cancelled) {\n            return Promise.reject('Cancelled');\n          }\n\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages);\n          }\n\n          const queryFnContext = {\n            queryKey: context.queryKey,\n            pageParam: param,\n            meta: context.options.meta\n          };\n          addSignalProperty(queryFnContext);\n          const queryFnResult = queryFn(queryFnContext);\n          const promise = Promise.resolve(queryFnResult).then(page => buildNewPages(pages, param, page, previous));\n          return promise;\n        };\n\n        let promise; // Fetch first page?\n\n        if (!oldPages.length) {\n          promise = fetchPage([]);\n        } // Fetch next page?\n        else if (isFetchingNextPage) {\n          const manual = typeof pageParam !== 'undefined';\n          const param = manual ? pageParam : getNextPageParam(context.options, oldPages);\n          promise = fetchPage(oldPages, manual, param);\n        } // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          const manual = typeof pageParam !== 'undefined';\n          const param = manual ? pageParam : getPreviousPageParam(context.options, oldPages);\n          promise = fetchPage(oldPages, manual, param, true);\n        } // Refetch pages\n        else {\n          newPageParams = [];\n          const manual = typeof context.options.getNextPageParam === 'undefined';\n          const shouldFetchFirstPage = refetchPage && oldPages[0] ? refetchPage(oldPages[0], 0, oldPages) : true; // Fetch first page\n\n          promise = shouldFetchFirstPage ? fetchPage([], manual, oldPageParams[0]) : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0])); // Fetch remaining pages\n\n          for (let i = 1; i < oldPages.length; i++) {\n            promise = promise.then(pages => {\n              const shouldFetchNextPage = refetchPage && oldPages[i] ? refetchPage(oldPages[i], i, oldPages) : true;\n\n              if (shouldFetchNextPage) {\n                const param = manual ? oldPageParams[i] : getNextPageParam(context.options, pages);\n                return fetchPage(pages, manual, param);\n              }\n\n              return Promise.resolve(buildNewPages(pages, oldPageParams[i], oldPages[i]));\n            });\n          }\n        }\n\n        const finalPromise = promise.then(pages => ({\n          pages,\n          pageParams: newPageParams\n        }));\n        return finalPromise;\n      };\n    }\n  };\n}\nfunction getNextPageParam(options, pages) {\n  return options.getNextPageParam == null ? void 0 : options.getNextPageParam(pages[pages.length - 1], pages);\n}\nfunction getPreviousPageParam(options, pages) {\n  return options.getPreviousPageParam == null ? void 0 : options.getPreviousPageParam(pages[0], pages);\n}\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\n\nfunction hasNextPage(options, pages) {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    const nextPageParam = getNextPageParam(options, pages);\n    return typeof nextPageParam !== 'undefined' && nextPageParam !== null && nextPageParam !== false;\n  }\n\n  return;\n}\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\n\nfunction hasPreviousPage(options, pages) {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    const previousPageParam = getPreviousPageParam(options, pages);\n    return typeof previousPageParam !== 'undefined' && previousPageParam !== null && previousPageParam !== false;\n  }\n\n  return;\n}\n\nexport { getNextPageParam, getPreviousPageParam, hasNextPage, hasPreviousPage, infiniteQueryBehavior };\n//# sourceMappingURL=infiniteQueryBehavior.mjs.map\n","import { shallowEqualObjects, noop, isServer, isValidTimeout, timeUntilStale, replaceData } from './utils.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { focusManager } from './focusManager.mjs';\nimport { Subscribable } from './subscribable.mjs';\nimport { canFetch, isCancelledError } from './retryer.mjs';\n\nclass QueryObserver extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.client = client;\n    this.options = options;\n    this.trackedProps = new Set();\n    this.selectError = null;\n    this.bindMethods();\n    this.setOptions(options);\n  }\n\n  bindMethods() {\n    this.remove = this.remove.bind(this);\n    this.refetch = this.refetch.bind(this);\n  }\n\n  onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this);\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch();\n      }\n\n      this.updateTimers();\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  }\n\n  shouldFetchOnReconnect() {\n    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnReconnect);\n  }\n\n  shouldFetchOnWindowFocus() {\n    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnWindowFocus);\n  }\n\n  destroy() {\n    this.listeners = [];\n    this.clearStaleTimeout();\n    this.clearRefetchInterval();\n    this.currentQuery.removeObserver(this);\n  }\n\n  setOptions(options, notifyOptions) {\n    const prevOptions = this.options;\n    const prevQuery = this.currentQuery;\n    this.options = this.client.defaultQueryOptions(options);\n\n    if (process.env.NODE_ENV !== 'production' && typeof (options == null ? void 0 : options.isDataEqual) !== 'undefined') {\n      this.client.getLogger().error(\"The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option\");\n    }\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.currentQuery,\n        observer: this\n      });\n    }\n\n    if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {\n      throw new Error('Expected enabled to be a boolean');\n    } // Keep previous query key if the user does not supply one\n\n\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey;\n    }\n\n    this.updateQuery();\n    const mounted = this.hasListeners(); // Fetch if there are subscribers\n\n    if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {\n      this.executeFetch();\n    } // Update result\n\n\n    this.updateResult(notifyOptions); // Update stale interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n      this.updateStaleTimeout();\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval(); // Update refetch interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.currentRefetchInterval)) {\n      this.updateRefetchInterval(nextRefetchInterval);\n    }\n  }\n\n  getOptimisticResult(options) {\n    const query = this.client.getQueryCache().build(this.client, options);\n    return this.createResult(query, options);\n  }\n\n  getCurrentResult() {\n    return this.currentResult;\n  }\n\n  trackResult(result) {\n    const trackedResult = {};\n    Object.keys(result).forEach(key => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key);\n          return result[key];\n        }\n      });\n    });\n    return trackedResult;\n  }\n\n  getCurrentQuery() {\n    return this.currentQuery;\n  }\n\n  remove() {\n    this.client.getQueryCache().remove(this.currentQuery);\n  }\n\n  refetch({\n    refetchPage,\n    ...options\n  } = {}) {\n    return this.fetch({ ...options,\n      meta: {\n        refetchPage\n      }\n    });\n  }\n\n  fetchOptimistic(options) {\n    const defaultedOptions = this.client.defaultQueryOptions(options);\n    const query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    query.isFetchingOptimistic = true;\n    return query.fetch().then(() => this.createResult(query, defaultedOptions));\n  }\n\n  fetch(fetchOptions) {\n    var _fetchOptions$cancelR;\n\n    return this.executeFetch({ ...fetchOptions,\n      cancelRefetch: (_fetchOptions$cancelR = fetchOptions.cancelRefetch) != null ? _fetchOptions$cancelR : true\n    }).then(() => {\n      this.updateResult();\n      return this.currentResult;\n    });\n  }\n\n  executeFetch(fetchOptions) {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery(); // Fetch\n\n    let promise = this.currentQuery.fetch(this.options, fetchOptions);\n\n    if (!(fetchOptions != null && fetchOptions.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  }\n\n  updateStaleTimeout() {\n    this.clearStaleTimeout();\n\n    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n      return;\n    }\n\n    const time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n\n    const timeout = time + 1;\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult();\n      }\n    }, timeout);\n  }\n\n  computeRefetchInterval() {\n    var _this$options$refetch;\n\n    return typeof this.options.refetchInterval === 'function' ? this.options.refetchInterval(this.currentResult.data, this.currentQuery) : (_this$options$refetch = this.options.refetchInterval) != null ? _this$options$refetch : false;\n  }\n\n  updateRefetchInterval(nextInterval) {\n    this.clearRefetchInterval();\n    this.currentRefetchInterval = nextInterval;\n\n    if (isServer || this.options.enabled === false || !isValidTimeout(this.currentRefetchInterval) || this.currentRefetchInterval === 0) {\n      return;\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        this.executeFetch();\n      }\n    }, this.currentRefetchInterval);\n  }\n\n  updateTimers() {\n    this.updateStaleTimeout();\n    this.updateRefetchInterval(this.computeRefetchInterval());\n  }\n\n  clearStaleTimeout() {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId);\n      this.staleTimeoutId = undefined;\n    }\n  }\n\n  clearRefetchInterval() {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId);\n      this.refetchIntervalId = undefined;\n    }\n  }\n\n  createResult(query, options) {\n    const prevQuery = this.currentQuery;\n    const prevOptions = this.options;\n    const prevResult = this.currentResult;\n    const prevResultState = this.currentResultState;\n    const prevResultOptions = this.currentResultOptions;\n    const queryChange = query !== prevQuery;\n    const queryInitialState = queryChange ? query.state : this.currentQueryInitialState;\n    const prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;\n    const {\n      state\n    } = query;\n    let {\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      fetchStatus,\n      status\n    } = state;\n    let isPreviousData = false;\n    let isPlaceholderData = false;\n    let data; // Optimistically set result in fetching state if needed\n\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners();\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode) ? 'fetching' : 'paused';\n\n        if (!dataUpdatedAt) {\n          status = 'loading';\n        }\n      }\n\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle';\n      }\n    } // Keep previous data if needed\n\n\n    if (options.keepPreviousData && !state.dataUpdatedAt && prevQueryResult != null && prevQueryResult.isSuccess && status !== 'error') {\n      data = prevQueryResult.data;\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt;\n      status = prevQueryResult.status;\n      isPreviousData = true;\n    } // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === this.selectFn) {\n        data = this.selectResult;\n      } else {\n        try {\n          this.selectFn = options.select;\n          data = options.select(state.data);\n          data = replaceData(prevResult == null ? void 0 : prevResult.data, data, options);\n          this.selectResult = data;\n          this.selectError = null;\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError);\n          }\n\n          this.selectError = selectError;\n        }\n      }\n    } // Use query data\n    else {\n      data = state.data;\n    } // Show placeholder data if needed\n\n\n    if (typeof options.placeholderData !== 'undefined' && typeof data === 'undefined' && status === 'loading') {\n      let placeholderData; // Memoize placeholder data\n\n      if (prevResult != null && prevResult.isPlaceholderData && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {\n        placeholderData = prevResult.data;\n      } else {\n        placeholderData = typeof options.placeholderData === 'function' ? options.placeholderData() : options.placeholderData;\n\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData);\n            this.selectError = null;\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError);\n            }\n\n            this.selectError = selectError;\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success';\n        data = replaceData(prevResult == null ? void 0 : prevResult.data, placeholderData, options);\n        isPlaceholderData = true;\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError;\n      data = this.selectResult;\n      errorUpdatedAt = Date.now();\n      status = 'error';\n    }\n\n    const isFetching = fetchStatus === 'fetching';\n    const isLoading = status === 'loading';\n    const isError = status === 'error';\n    const result = {\n      status,\n      fetchStatus,\n      isLoading,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading && isFetching,\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      failureReason: state.fetchFailureReason,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isLoading,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove\n    };\n    return result;\n  }\n\n  updateResult(notifyOptions) {\n    const prevResult = this.currentResult;\n    const nextResult = this.createResult(this.currentQuery, this.options);\n    this.currentResultState = this.currentQuery.state;\n    this.currentResultOptions = this.options; // Only notify and update result if something has changed\n\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return;\n    }\n\n    this.currentResult = nextResult; // Determine which callbacks to trigger\n\n    const defaultNotifyOptions = {\n      cache: true\n    };\n\n    const shouldNotifyListeners = () => {\n      if (!prevResult) {\n        return true;\n      }\n\n      const {\n        notifyOnChangeProps\n      } = this.options;\n\n      if (notifyOnChangeProps === 'all' || !notifyOnChangeProps && !this.trackedProps.size) {\n        return true;\n      }\n\n      const includedProps = new Set(notifyOnChangeProps != null ? notifyOnChangeProps : this.trackedProps);\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error');\n      }\n\n      return Object.keys(this.currentResult).some(key => {\n        const typedKey = key;\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey];\n        return changed && includedProps.has(typedKey);\n      });\n    };\n\n    if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true;\n    }\n\n    this.notify({ ...defaultNotifyOptions,\n      ...notifyOptions\n    });\n  }\n\n  updateQuery() {\n    const query = this.client.getQueryCache().build(this.client, this.options);\n\n    if (query === this.currentQuery) {\n      return;\n    }\n\n    const prevQuery = this.currentQuery;\n    this.currentQuery = query;\n    this.currentQueryInitialState = query.state;\n    this.previousQueryResult = this.currentResult;\n\n    if (this.hasListeners()) {\n      prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n      query.addObserver(this);\n    }\n  }\n\n  onQueryUpdate(action) {\n    const notifyOptions = {};\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual;\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true;\n    }\n\n    this.updateResult(notifyOptions);\n\n    if (this.hasListeners()) {\n      this.updateTimers();\n    }\n  }\n\n  notify(notifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        var _this$options$onSucce, _this$options, _this$options$onSettl, _this$options2;\n\n        (_this$options$onSucce = (_this$options = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options, this.currentResult.data);\n        (_this$options$onSettl = (_this$options2 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options2, this.currentResult.data, null);\n      } else if (notifyOptions.onError) {\n        var _this$options$onError, _this$options3, _this$options$onSettl2, _this$options4;\n\n        (_this$options$onError = (_this$options3 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options3, this.currentResult.error);\n        (_this$options$onSettl2 = (_this$options4 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options4, undefined, this.currentResult.error);\n      } // Then trigger the listeners\n\n\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult);\n        });\n      } // Then the cache listeners\n\n\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated'\n        });\n      }\n    });\n  }\n\n}\n\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === 'error' && options.retryOnMount === false);\n}\n\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\n\nfunction shouldFetchOn(query, options, field) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field;\n    return value === 'always' || value !== false && isStale(query, options);\n  }\n\n  return false;\n}\n\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== 'error') && isStale(query, options);\n}\n\nfunction isStale(query, options) {\n  return query.isStaleByTime(options.staleTime);\n}\n\nexport { QueryObserver };\n//# sourceMappingURL=queryObserver.mjs.map\n","import { difference, replaceAt } from './utils.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { QueryObserver } from './queryObserver.mjs';\nimport { Subscribable } from './subscribable.mjs';\n\nclass QueriesObserver extends Subscribable {\n  constructor(client, queries) {\n    super();\n    this.client = client;\n    this.queries = [];\n    this.result = [];\n    this.observers = [];\n    this.observersMap = {};\n\n    if (queries) {\n      this.setQueries(queries);\n    }\n  }\n\n  onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.observers.forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result);\n        });\n      });\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  }\n\n  destroy() {\n    this.listeners = [];\n    this.observers.forEach(observer => {\n      observer.destroy();\n    });\n  }\n\n  setQueries(queries, notifyOptions) {\n    this.queries = queries;\n    notifyManager.batch(() => {\n      const prevObservers = this.observers;\n      const newObserverMatches = this.findMatchingObservers(this.queries); // set options for the new observers to notify of changes\n\n      newObserverMatches.forEach(match => match.observer.setOptions(match.defaultedQueryOptions, notifyOptions));\n      const newObservers = newObserverMatches.map(match => match.observer);\n      const newObserversMap = Object.fromEntries(newObservers.map(observer => [observer.options.queryHash, observer]));\n      const newResult = newObservers.map(observer => observer.getCurrentResult());\n      const hasIndexChange = newObservers.some((observer, index) => observer !== prevObservers[index]);\n\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return;\n      }\n\n      this.observers = newObservers;\n      this.observersMap = newObserversMap;\n      this.result = newResult;\n\n      if (!this.hasListeners()) {\n        return;\n      }\n\n      difference(prevObservers, newObservers).forEach(observer => {\n        observer.destroy();\n      });\n      difference(newObservers, prevObservers).forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result);\n        });\n      });\n      this.notify();\n    });\n  }\n\n  getCurrentResult() {\n    return this.result;\n  }\n\n  getQueries() {\n    return this.observers.map(observer => observer.getCurrentQuery());\n  }\n\n  getObservers() {\n    return this.observers;\n  }\n\n  getOptimisticResult(queries) {\n    return this.findMatchingObservers(queries).map(match => match.observer.getOptimisticResult(match.defaultedQueryOptions));\n  }\n\n  findMatchingObservers(queries) {\n    const prevObservers = this.observers;\n    const prevObserversMap = new Map(prevObservers.map(observer => [observer.options.queryHash, observer]));\n    const defaultedQueryOptions = queries.map(options => this.client.defaultQueryOptions(options));\n    const matchingObservers = defaultedQueryOptions.flatMap(defaultedOptions => {\n      const match = prevObserversMap.get(defaultedOptions.queryHash);\n\n      if (match != null) {\n        return [{\n          defaultedQueryOptions: defaultedOptions,\n          observer: match\n        }];\n      }\n\n      return [];\n    });\n    const matchedQueryHashes = new Set(matchingObservers.map(match => match.defaultedQueryOptions.queryHash));\n    const unmatchedQueries = defaultedQueryOptions.filter(defaultedOptions => !matchedQueryHashes.has(defaultedOptions.queryHash));\n    const matchingObserversSet = new Set(matchingObservers.map(match => match.observer));\n    const unmatchedObservers = prevObservers.filter(prevObserver => !matchingObserversSet.has(prevObserver));\n\n    const getObserver = options => {\n      const defaultedOptions = this.client.defaultQueryOptions(options);\n      const currentObserver = this.observersMap[defaultedOptions.queryHash];\n      return currentObserver != null ? currentObserver : new QueryObserver(this.client, defaultedOptions);\n    };\n\n    const newOrReusedObservers = unmatchedQueries.map((options, index) => {\n      if (options.keepPreviousData) {\n        // return previous data from one of the observers that no longer match\n        const previouslyUsedObserver = unmatchedObservers[index];\n\n        if (previouslyUsedObserver !== undefined) {\n          return {\n            defaultedQueryOptions: options,\n            observer: previouslyUsedObserver\n          };\n        }\n      }\n\n      return {\n        defaultedQueryOptions: options,\n        observer: getObserver(options)\n      };\n    });\n\n    const sortMatchesByOrderOfQueries = (a, b) => defaultedQueryOptions.indexOf(a.defaultedQueryOptions) - defaultedQueryOptions.indexOf(b.defaultedQueryOptions);\n\n    return matchingObservers.concat(newOrReusedObservers).sort(sortMatchesByOrderOfQueries);\n  }\n\n  onUpdate(observer, result) {\n    const index = this.observers.indexOf(observer);\n\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result);\n      this.notify();\n    }\n  }\n\n  notify() {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(this.result);\n      });\n    });\n  }\n\n}\n\nexport { QueriesObserver };\n//# sourceMappingURL=queriesObserver.mjs.map\n","import { QueryObserver } from './queryObserver.mjs';\nimport { infiniteQueryBehavior, hasNextPage, hasPreviousPage } from './infiniteQueryBehavior.mjs';\n\nclass InfiniteQueryObserver extends QueryObserver {\n  // Type override\n  // Type override\n  // Type override\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(client, options) {\n    super(client, options);\n  }\n\n  bindMethods() {\n    super.bindMethods();\n    this.fetchNextPage = this.fetchNextPage.bind(this);\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this);\n  }\n\n  setOptions(options, notifyOptions) {\n    super.setOptions({ ...options,\n      behavior: infiniteQueryBehavior()\n    }, notifyOptions);\n  }\n\n  getOptimisticResult(options) {\n    options.behavior = infiniteQueryBehavior();\n    return super.getOptimisticResult(options);\n  }\n\n  fetchNextPage({\n    pageParam,\n    ...options\n  } = {}) {\n    return this.fetch({ ...options,\n      meta: {\n        fetchMore: {\n          direction: 'forward',\n          pageParam\n        }\n      }\n    });\n  }\n\n  fetchPreviousPage({\n    pageParam,\n    ...options\n  } = {}) {\n    return this.fetch({ ...options,\n      meta: {\n        fetchMore: {\n          direction: 'backward',\n          pageParam\n        }\n      }\n    });\n  }\n\n  createResult(query, options) {\n    var _state$fetchMeta, _state$fetchMeta$fetc, _state$fetchMeta2, _state$fetchMeta2$fet, _state$data, _state$data2;\n\n    const {\n      state\n    } = query;\n    const result = super.createResult(query, options);\n    const {\n      isFetching,\n      isRefetching\n    } = result;\n    const isFetchingNextPage = isFetching && ((_state$fetchMeta = state.fetchMeta) == null ? void 0 : (_state$fetchMeta$fetc = _state$fetchMeta.fetchMore) == null ? void 0 : _state$fetchMeta$fetc.direction) === 'forward';\n    const isFetchingPreviousPage = isFetching && ((_state$fetchMeta2 = state.fetchMeta) == null ? void 0 : (_state$fetchMeta2$fet = _state$fetchMeta2.fetchMore) == null ? void 0 : _state$fetchMeta2$fet.direction) === 'backward';\n    return { ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, (_state$data = state.data) == null ? void 0 : _state$data.pages),\n      hasPreviousPage: hasPreviousPage(options, (_state$data2 = state.data) == null ? void 0 : _state$data2.pages),\n      isFetchingNextPage,\n      isFetchingPreviousPage,\n      isRefetching: isRefetching && !isFetchingNextPage && !isFetchingPreviousPage\n    };\n  }\n\n}\n\nexport { InfiniteQueryObserver };\n//# sourceMappingURL=infiniteQueryObserver.mjs.map\n","import { getDefaultState } from './mutation.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { Subscribable } from './subscribable.mjs';\nimport { shallowEqualObjects } from './utils.mjs';\n\n// CLASS\nclass MutationObserver extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.client = client;\n    this.setOptions(options);\n    this.bindMethods();\n    this.updateResult();\n  }\n\n  bindMethods() {\n    this.mutate = this.mutate.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  setOptions(options) {\n    var _this$currentMutation;\n\n    const prevOptions = this.options;\n    this.options = this.client.defaultMutationOptions(options);\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this\n      });\n    }\n\n    (_this$currentMutation = this.currentMutation) == null ? void 0 : _this$currentMutation.setOptions(this.options);\n  }\n\n  onUnsubscribe() {\n    if (!this.listeners.length) {\n      var _this$currentMutation2;\n\n      (_this$currentMutation2 = this.currentMutation) == null ? void 0 : _this$currentMutation2.removeObserver(this);\n    }\n  }\n\n  onMutationUpdate(action) {\n    this.updateResult(); // Determine which callbacks to trigger\n\n    const notifyOptions = {\n      listeners: true\n    };\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true;\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true;\n    }\n\n    this.notify(notifyOptions);\n  }\n\n  getCurrentResult() {\n    return this.currentResult;\n  }\n\n  reset() {\n    this.currentMutation = undefined;\n    this.updateResult();\n    this.notify({\n      listeners: true\n    });\n  }\n\n  mutate(variables, options) {\n    this.mutateOptions = options;\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this);\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, { ...this.options,\n      variables: typeof variables !== 'undefined' ? variables : this.options.variables\n    });\n    this.currentMutation.addObserver(this);\n    return this.currentMutation.execute();\n  }\n\n  updateResult() {\n    const state = this.currentMutation ? this.currentMutation.state : getDefaultState();\n    const result = { ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset\n    };\n    this.currentResult = result;\n  }\n\n  notify(options) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions && this.hasListeners()) {\n        if (options.onSuccess) {\n          var _this$mutateOptions$o, _this$mutateOptions, _this$mutateOptions$o2, _this$mutateOptions2;\n\n          (_this$mutateOptions$o = (_this$mutateOptions = this.mutateOptions).onSuccess) == null ? void 0 : _this$mutateOptions$o.call(_this$mutateOptions, this.currentResult.data, this.currentResult.variables, this.currentResult.context);\n          (_this$mutateOptions$o2 = (_this$mutateOptions2 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o2.call(_this$mutateOptions2, this.currentResult.data, null, this.currentResult.variables, this.currentResult.context);\n        } else if (options.onError) {\n          var _this$mutateOptions$o3, _this$mutateOptions3, _this$mutateOptions$o4, _this$mutateOptions4;\n\n          (_this$mutateOptions$o3 = (_this$mutateOptions3 = this.mutateOptions).onError) == null ? void 0 : _this$mutateOptions$o3.call(_this$mutateOptions3, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n          (_this$mutateOptions$o4 = (_this$mutateOptions4 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o4.call(_this$mutateOptions4, undefined, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n        }\n      } // Then trigger the listeners\n\n\n      if (options.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult);\n        });\n      }\n    });\n  }\n\n}\n\nexport { MutationObserver };\n//# sourceMappingURL=mutationObserver.mjs.map\n","// TYPES\n// FUNCTIONS\nfunction dehydrateMutation(mutation) {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state\n  };\n} // Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\n\n\nfunction dehydrateQuery(query) {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash\n  };\n}\n\nfunction defaultShouldDehydrateMutation(mutation) {\n  return mutation.state.isPaused;\n}\nfunction defaultShouldDehydrateQuery(query) {\n  return query.state.status === 'success';\n}\nfunction dehydrate(client, options = {}) {\n  const mutations = [];\n  const queries = [];\n\n  if (options.dehydrateMutations !== false) {\n    const shouldDehydrateMutation = options.shouldDehydrateMutation || defaultShouldDehydrateMutation;\n    client.getMutationCache().getAll().forEach(mutation => {\n      if (shouldDehydrateMutation(mutation)) {\n        mutations.push(dehydrateMutation(mutation));\n      }\n    });\n  }\n\n  if (options.dehydrateQueries !== false) {\n    const shouldDehydrateQuery = options.shouldDehydrateQuery || defaultShouldDehydrateQuery;\n    client.getQueryCache().getAll().forEach(query => {\n      if (shouldDehydrateQuery(query)) {\n        queries.push(dehydrateQuery(query));\n      }\n    });\n  }\n\n  return {\n    mutations,\n    queries\n  };\n}\nfunction hydrate(client, dehydratedState, options) {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return;\n  }\n\n  const mutationCache = client.getMutationCache();\n  const queryCache = client.getQueryCache(); // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  const mutations = dehydratedState.mutations || []; // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  const queries = dehydratedState.queries || [];\n  mutations.forEach(dehydratedMutation => {\n    var _options$defaultOptio;\n\n    mutationCache.build(client, { ...(options == null ? void 0 : (_options$defaultOptio = options.defaultOptions) == null ? void 0 : _options$defaultOptio.mutations),\n      mutationKey: dehydratedMutation.mutationKey\n    }, dehydratedMutation.state);\n  });\n  queries.forEach(dehydratedQuery => {\n    var _options$defaultOptio2;\n\n    const query = queryCache.get(dehydratedQuery.queryHash); // Reset fetch status to idle in the dehydrated state to avoid\n    // query being stuck in fetching state upon hydration\n\n    const dehydratedQueryState = { ...dehydratedQuery.state,\n      fetchStatus: 'idle'\n    }; // Do not hydrate if an existing query exists with newer data\n\n    if (query) {\n      if (query.state.dataUpdatedAt < dehydratedQueryState.dataUpdatedAt) {\n        query.setState(dehydratedQueryState);\n      }\n\n      return;\n    } // Restore query\n\n\n    queryCache.build(client, { ...(options == null ? void 0 : (_options$defaultOptio2 = options.defaultOptions) == null ? void 0 : _options$defaultOptio2.queries),\n      queryKey: dehydratedQuery.queryKey,\n      queryHash: dehydratedQuery.queryHash\n    }, dehydratedQueryState);\n  });\n}\n\nexport { defaultShouldDehydrateMutation, defaultShouldDehydrateQuery, dehydrate, hydrate };\n//# sourceMappingURL=hydration.mjs.map\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { QueryKey, MutationKey } from '@tanstack/query-core'\nimport { isRef, unref } from 'vue-demi'\nimport type { UnwrapRef } from 'vue-demi'\n\nexport const VUE_QUERY_CLIENT = 'VUE_QUERY_CLIENT'\n\nexport function getClientKey(key?: string) {\n  const suffix = key ? `:${key}` : ''\n  return `${VUE_QUERY_CLIENT}${suffix}`\n}\n\nexport function isQueryKey(value: unknown): value is QueryKey {\n  return Array.isArray(value)\n}\n\nexport function isMutationKey(value: unknown): value is MutationKey {\n  return Array.isArray(value)\n}\n\nexport function updateState(\n  state: Record<string, unknown>,\n  update: Record<string, any>,\n): void {\n  Object.keys(state).forEach((key) => {\n    state[key] = update[key]\n  })\n}\n\nexport function cloneDeep<T>(\n  value: T,\n  customizer?: (val: unknown) => unknown | void,\n): T {\n  if (customizer) {\n    const result = customizer(value)\n    if (result !== undefined || isRef(value)) {\n      return result as typeof value\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return value.map((val) => cloneDeep(val, customizer)) as typeof value\n  }\n\n  if (typeof value === 'object' && isPlainObject(value)) {\n    const entries = Object.entries(value).map(([key, val]) => [\n      key,\n      cloneDeep(val, customizer),\n    ])\n    return Object.fromEntries(entries)\n  }\n\n  return value\n}\n\nexport function cloneDeepUnref<T>(obj: T): UnwrapRef<T> {\n  return cloneDeep(obj, (val) => {\n    if (isRef(val)) {\n      return cloneDeepUnref(unref(val))\n    }\n  }) as UnwrapRef<typeof obj>\n}\n\nfunction isPlainObject(value: unknown): value is Object {\n  if (Object.prototype.toString.call(value) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(value)\n  return prototype === null || prototype === Object.prototype\n}\n","import { getCurrentInstance, inject } from 'vue-demi'\n\nimport type { QueryClient } from './queryClient'\nimport { getClientKey } from './utils'\n\nexport function useQueryClient(id = ''): QueryClient {\n  const vm = getCurrentInstance()?.proxy\n\n  if (!vm) {\n    throw new Error('vue-query hooks can only be used inside setup() function.')\n  }\n\n  const key = getClientKey(id)\n  const queryClient = inject<QueryClient>(key)\n\n  if (!queryClient) {\n    throw new Error(\n      \"No 'queryClient' found in Vue context, use 'VueQueryPlugin' to properly initialize the library.\",\n    )\n  }\n\n  return queryClient\n}\n","import { QueryCache as QC } from '@tanstack/query-core'\nimport type { Query, QueryKey, QueryFilters } from '@tanstack/query-core'\nimport type { MaybeRefDeep } from './types'\nimport { cloneDeepUnref, isQueryKey } from './utils'\n\nexport class QueryCache extends QC {\n  find<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    arg1: MaybeRefDeep<QueryKey>,\n    arg2?: MaybeRefDeep<QueryFilters>,\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const arg1Unreffed = cloneDeepUnref(arg1)\n    const arg2Unreffed = cloneDeepUnref(arg2) as QueryFilters\n    return super.find(arg1Unreffed, arg2Unreffed)\n  }\n\n  findAll(\n    queryKey?: MaybeRefDeep<QueryKey>,\n    filters?: MaybeRefDeep<QueryFilters>,\n  ): Query[]\n  findAll(filters?: MaybeRefDeep<QueryFilters>): Query[]\n  findAll(\n    arg1?: MaybeRefDeep<QueryKey | QueryFilters>,\n    arg2?: MaybeRefDeep<QueryFilters>,\n  ): Query[]\n  findAll(\n    arg1?: MaybeRefDeep<QueryKey> | MaybeRefDeep<QueryFilters>,\n    arg2?: MaybeRefDeep<QueryFilters>,\n  ): Query[] {\n    const arg1Unreffed = cloneDeepUnref(arg1) as QueryKey | QueryFilters\n    const arg2Unreffed = cloneDeepUnref(arg2) as QueryFilters\n    if (isQueryKey(arg1Unreffed)) {\n      return super.findAll(arg1Unreffed, arg2Unreffed)\n    }\n    return super.findAll(arg1Unreffed)\n  }\n}\n","import { MutationCache as MC } from '@tanstack/query-core'\nimport type { Mutation, MutationFilters } from '@tanstack/query-core'\nimport type { MaybeRefDeep } from './types'\nimport { cloneDeepUnref } from './utils'\n\nexport class MutationCache extends MC {\n  find<TData = unknown, TError = unknown, TVariables = any, TContext = unknown>(\n    filters: MaybeRefDeep<MutationFilters>,\n  ): Mutation<TData, TError, TVariables, TContext> | undefined {\n    return super.find(cloneDeepUnref(filters) as MutationFilters)\n  }\n\n  findAll(filters: MaybeRefDeep<MutationFilters>): Mutation[] {\n    return super.findAll(cloneDeepUnref(filters) as MutationFilters)\n  }\n}\n","import { ref } from 'vue-demi'\nimport { QueryClient as QC } from '@tanstack/query-core'\nimport type {\n  QueryKey,\n  QueryClientConfig,\n  SetDataOptions,\n  ResetQueryFilters,\n  ResetOptions,\n  CancelOptions,\n  InvalidateQueryFilters,\n  InvalidateOptions,\n  RefetchQueryFilters,\n  RefetchOptions,\n  FetchQueryOptions,\n  QueryFunction,\n  FetchInfiniteQueryOptions,\n  InfiniteData,\n  DefaultOptions,\n  QueryObserverOptions,\n  MutationKey,\n  MutationObserverOptions,\n  QueryFilters,\n  MutationFilters,\n  QueryState,\n  Updater,\n} from '@tanstack/query-core'\nimport type { MaybeRefDeep } from './types'\nimport { cloneDeepUnref, isQueryKey } from './utils'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\n\nexport class QueryClient extends QC {\n  constructor(config: MaybeRefDeep<QueryClientConfig> = {}) {\n    const unreffedConfig = cloneDeepUnref(config) as QueryClientConfig\n    const vueQueryConfig: QueryClientConfig = {\n      logger: cloneDeepUnref(unreffedConfig.logger),\n      defaultOptions: cloneDeepUnref(unreffedConfig.defaultOptions),\n      queryCache: unreffedConfig.queryCache || new QueryCache(),\n      mutationCache: unreffedConfig.mutationCache || new MutationCache(),\n    }\n    super(vueQueryConfig)\n  }\n\n  isRestoring = ref(false)\n\n  isFetching(filters?: MaybeRefDeep<QueryFilters>): number\n  isFetching(\n    queryKey?: MaybeRefDeep<QueryKey>,\n    filters?: MaybeRefDeep<QueryFilters>,\n  ): number\n  isFetching(\n    arg1?: MaybeRefDeep<QueryFilters | QueryKey>,\n    arg2?: MaybeRefDeep<QueryFilters>,\n  ): number {\n    const arg1Unreffed = cloneDeepUnref(arg1)\n    const arg2Unreffed = cloneDeepUnref(arg2) as QueryFilters\n    if (isQueryKey(arg1Unreffed)) {\n      return super.isFetching(arg1Unreffed, arg2Unreffed)\n    }\n    return super.isFetching(arg1Unreffed as QueryFilters)\n  }\n\n  isMutating(filters?: MaybeRefDeep<MutationFilters>): number {\n    return super.isMutating(cloneDeepUnref(filters) as MutationFilters)\n  }\n\n  getQueryData<TData = unknown>(\n    queryKey: MaybeRefDeep<QueryKey>,\n    filters?: MaybeRefDeep<QueryFilters>,\n  ): TData | undefined {\n    return super.getQueryData(\n      cloneDeepUnref(queryKey),\n      cloneDeepUnref(filters) as QueryFilters,\n    )\n  }\n\n  getQueriesData<TData = unknown>(\n    queryKey: MaybeRefDeep<QueryKey>,\n  ): [QueryKey, TData | undefined][]\n  getQueriesData<TData = unknown>(\n    filters: MaybeRefDeep<QueryFilters>,\n  ): [QueryKey, TData | undefined][]\n  getQueriesData<TData = unknown>(\n    queryKeyOrFilters: MaybeRefDeep<QueryKey> | MaybeRefDeep<QueryFilters>,\n  ): [QueryKey, TData | undefined][] {\n    const unreffed = cloneDeepUnref(queryKeyOrFilters)\n    if (isQueryKey(unreffed)) {\n      return super.getQueriesData(unreffed)\n    }\n    return super.getQueriesData(unreffed as QueryFilters)\n  }\n\n  setQueryData<TData>(\n    queryKey: MaybeRefDeep<QueryKey>,\n    updater: Updater<TData | undefined, TData | undefined>,\n    options?: MaybeRefDeep<SetDataOptions>,\n  ): TData | undefined {\n    return super.setQueryData(\n      cloneDeepUnref(queryKey),\n      updater,\n      cloneDeepUnref(options) as SetDataOptions,\n    )\n  }\n\n  setQueriesData<TData>(\n    queryKey: MaybeRefDeep<QueryKey>,\n    updater: Updater<TData | undefined, TData | undefined>,\n    options?: MaybeRefDeep<SetDataOptions>,\n  ): [QueryKey, TData | undefined][]\n  setQueriesData<TData>(\n    filters: MaybeRefDeep<QueryFilters>,\n    updater: Updater<TData | undefined, TData | undefined>,\n    options?: MaybeRefDeep<SetDataOptions>,\n  ): [QueryKey, TData | undefined][]\n  setQueriesData<TData>(\n    queryKeyOrFilters: MaybeRefDeep<QueryKey | QueryFilters>,\n    updater: Updater<TData | undefined, TData | undefined>,\n    options?: MaybeRefDeep<SetDataOptions>,\n  ): [QueryKey, TData | undefined][] {\n    const arg1Unreffed = cloneDeepUnref(queryKeyOrFilters)\n    const arg3Unreffed = cloneDeepUnref(options) as SetDataOptions\n    if (isQueryKey(arg1Unreffed)) {\n      return super.setQueriesData(arg1Unreffed, updater, arg3Unreffed)\n    }\n    return super.setQueriesData(\n      arg1Unreffed as QueryFilters,\n      updater,\n      arg3Unreffed,\n    )\n  }\n\n  getQueryState<TData = unknown, TError = undefined>(\n    queryKey: MaybeRefDeep<QueryKey>,\n    filters?: MaybeRefDeep<QueryFilters>,\n  ): QueryState<TData, TError> | undefined {\n    return super.getQueryState(\n      cloneDeepUnref(queryKey),\n      cloneDeepUnref(filters) as QueryFilters,\n    )\n  }\n\n  removeQueries(filters?: MaybeRefDeep<QueryFilters>): void\n  removeQueries(\n    queryKey?: MaybeRefDeep<QueryKey>,\n    filters?: MaybeRefDeep<QueryFilters>,\n  ): void\n  removeQueries(\n    arg1?: MaybeRefDeep<QueryKey | QueryFilters>,\n    arg2?: MaybeRefDeep<QueryFilters>,\n  ): void {\n    const arg1Unreffed = cloneDeepUnref(arg1)\n    if (isQueryKey(arg1Unreffed)) {\n      return super.removeQueries(\n        arg1Unreffed,\n        cloneDeepUnref(arg2) as QueryFilters,\n      )\n    }\n    return super.removeQueries(arg1Unreffed as QueryFilters)\n  }\n\n  resetQueries<TPageData = unknown>(\n    filters?: MaybeRefDeep<ResetQueryFilters<TPageData>>,\n    options?: MaybeRefDeep<ResetOptions>,\n  ): Promise<void>\n  resetQueries<TPageData = unknown>(\n    queryKey?: MaybeRefDeep<QueryKey>,\n    filters?: MaybeRefDeep<ResetQueryFilters<TPageData>>,\n    options?: MaybeRefDeep<ResetOptions>,\n  ): Promise<void>\n  resetQueries<TPageData = unknown>(\n    arg1?: MaybeRefDeep<QueryKey | ResetQueryFilters<TPageData>>,\n    arg2?: MaybeRefDeep<ResetQueryFilters<TPageData> | ResetOptions>,\n    arg3?: MaybeRefDeep<ResetOptions>,\n  ): Promise<void> {\n    const arg1Unreffed = cloneDeepUnref(arg1)\n    const arg2Unreffed = cloneDeepUnref(arg2)\n    if (isQueryKey(arg1Unreffed)) {\n      return super.resetQueries(\n        arg1Unreffed,\n        arg2Unreffed as ResetQueryFilters<TPageData> | undefined,\n        cloneDeepUnref(arg3) as ResetOptions,\n      )\n    }\n    return super.resetQueries(\n      arg1Unreffed as ResetQueryFilters<TPageData>,\n      arg2Unreffed as ResetOptions,\n    )\n  }\n\n  cancelQueries(\n    filters?: MaybeRefDeep<QueryFilters>,\n    options?: MaybeRefDeep<CancelOptions>,\n  ): Promise<void>\n  cancelQueries(\n    queryKey?: MaybeRefDeep<QueryKey>,\n    filters?: MaybeRefDeep<QueryFilters>,\n    options?: MaybeRefDeep<CancelOptions>,\n  ): Promise<void>\n  cancelQueries(\n    arg1?: MaybeRefDeep<QueryKey | QueryFilters>,\n    arg2?: MaybeRefDeep<QueryFilters | CancelOptions>,\n    arg3?: MaybeRefDeep<CancelOptions>,\n  ): Promise<void> {\n    const arg1Unreffed = cloneDeepUnref(arg1)\n    const arg2Unreffed = cloneDeepUnref(arg2)\n    if (isQueryKey(arg1Unreffed)) {\n      return super.cancelQueries(\n        arg1Unreffed,\n        arg2Unreffed as QueryFilters | undefined,\n        cloneDeepUnref(arg3) as CancelOptions,\n      )\n    }\n    return super.cancelQueries(\n      arg1Unreffed as QueryFilters,\n      arg2Unreffed as CancelOptions,\n    )\n  }\n\n  invalidateQueries<TPageData = unknown>(\n    filters?: MaybeRefDeep<InvalidateQueryFilters<TPageData>>,\n    options?: MaybeRefDeep<InvalidateOptions>,\n  ): Promise<void>\n  invalidateQueries<TPageData = unknown>(\n    queryKey?: MaybeRefDeep<QueryKey>,\n    filters?: MaybeRefDeep<InvalidateQueryFilters<TPageData>>,\n    options?: MaybeRefDeep<InvalidateOptions>,\n  ): Promise<void>\n  invalidateQueries<TPageData = unknown>(\n    arg1?: MaybeRefDeep<QueryKey | InvalidateQueryFilters<TPageData>>,\n    arg2?: MaybeRefDeep<InvalidateQueryFilters<TPageData> | InvalidateOptions>,\n    arg3?: MaybeRefDeep<InvalidateOptions>,\n  ): Promise<void> {\n    const arg1Unreffed = cloneDeepUnref(arg1)\n    const arg2Unreffed = cloneDeepUnref(arg2)\n    if (isQueryKey(arg1Unreffed)) {\n      return super.invalidateQueries(\n        arg1Unreffed,\n        arg2Unreffed as InvalidateQueryFilters | undefined,\n        cloneDeepUnref(arg3) as InvalidateOptions,\n      )\n    }\n    return super.invalidateQueries(\n      arg1Unreffed as InvalidateQueryFilters<TPageData>,\n      arg2Unreffed as InvalidateOptions,\n    )\n  }\n\n  refetchQueries<TPageData = unknown>(\n    filters?: MaybeRefDeep<RefetchQueryFilters<TPageData>>,\n    options?: MaybeRefDeep<RefetchOptions>,\n  ): Promise<void>\n  refetchQueries<TPageData = unknown>(\n    queryKey?: MaybeRefDeep<QueryKey>,\n    filters?: MaybeRefDeep<RefetchQueryFilters<TPageData>>,\n    options?: MaybeRefDeep<RefetchOptions>,\n  ): Promise<void>\n  refetchQueries<TPageData = unknown>(\n    arg1?: MaybeRefDeep<QueryKey | RefetchQueryFilters<TPageData>>,\n    arg2?: MaybeRefDeep<RefetchQueryFilters<TPageData> | RefetchOptions>,\n    arg3?: MaybeRefDeep<RefetchOptions>,\n  ): Promise<void> {\n    const arg1Unreffed = cloneDeepUnref(arg1)\n    const arg2Unreffed = cloneDeepUnref(arg2)\n    if (isQueryKey(arg1Unreffed)) {\n      return super.refetchQueries(\n        arg1Unreffed,\n        arg2Unreffed as RefetchQueryFilters | undefined,\n        cloneDeepUnref(arg3) as RefetchOptions,\n      )\n    }\n    return super.refetchQueries(\n      arg1Unreffed as RefetchQueryFilters<TPageData>,\n      arg2Unreffed as RefetchOptions,\n    )\n  }\n\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: MaybeRefDeep<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: MaybeRefDeep<TQueryKey>,\n    options?: MaybeRefDeep<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: MaybeRefDeep<TQueryKey>,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: MaybeRefDeep<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1:\n      | MaybeRefDeep<TQueryKey>\n      | MaybeRefDeep<FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | MaybeRefDeep<FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>>,\n    arg3?: MaybeRefDeep<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<TData> {\n    const arg1Unreffed = cloneDeepUnref(arg1)\n    const arg2Unreffed = cloneDeepUnref(arg2)\n    if (isQueryKey(arg1Unreffed)) {\n      return super.fetchQuery(\n        arg1Unreffed as TQueryKey,\n        arg2Unreffed as QueryFunction<TQueryFnData, TQueryKey>,\n        cloneDeepUnref(arg3) as FetchQueryOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryKey\n        >,\n      )\n    }\n    return super.fetchQuery(\n      arg1Unreffed as FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    )\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: MaybeRefDeep<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: MaybeRefDeep<TQueryKey>,\n    options?: MaybeRefDeep<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: MaybeRefDeep<TQueryKey>,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: MaybeRefDeep<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1: MaybeRefDeep<\n      TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | MaybeRefDeep<FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>>,\n    arg3?: MaybeRefDeep<\n      FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<void> {\n    return super.prefetchQuery(\n      cloneDeepUnref(arg1) as any,\n      cloneDeepUnref(arg2) as any,\n      cloneDeepUnref(arg3) as any,\n    )\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: MaybeRefDeep<\n      FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: MaybeRefDeep<TQueryKey>,\n    options?: MaybeRefDeep<\n      FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: MaybeRefDeep<TQueryKey>,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: MaybeRefDeep<\n      FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1: MaybeRefDeep<\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | MaybeRefDeep<\n          FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n        >,\n    arg3?: MaybeRefDeep<\n      FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<InfiniteData<TData>> {\n    const arg1Unreffed = cloneDeepUnref(arg1)\n    const arg2Unreffed = cloneDeepUnref(arg2)\n    if (isQueryKey(arg1Unreffed)) {\n      return super.fetchInfiniteQuery(\n        arg1Unreffed as TQueryKey,\n        arg2Unreffed as QueryFunction<TQueryFnData, TQueryKey>,\n        cloneDeepUnref(arg3) as FetchInfiniteQueryOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryKey\n        >,\n      )\n    }\n    return super.fetchInfiniteQuery(\n      arg1Unreffed as FetchInfiniteQueryOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryKey\n      >,\n    )\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: MaybeRefDeep<\n      FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: MaybeRefDeep<TQueryKey>,\n    options?: MaybeRefDeep<\n      FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: MaybeRefDeep<TQueryKey>,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: MaybeRefDeep<\n      FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1: MaybeRefDeep<\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | MaybeRefDeep<\n          FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n        >,\n    arg3?: MaybeRefDeep<\n      FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n    >,\n  ): Promise<void> {\n    return super.prefetchInfiniteQuery(\n      cloneDeepUnref(arg1) as any,\n      cloneDeepUnref(arg2) as any,\n      cloneDeepUnref(arg3) as any,\n    )\n  }\n\n  setDefaultOptions(options: MaybeRefDeep<DefaultOptions>): void {\n    super.setDefaultOptions(cloneDeepUnref(options) as DefaultOptions)\n  }\n\n  setQueryDefaults(\n    queryKey: MaybeRefDeep<QueryKey>,\n    options: MaybeRefDeep<QueryObserverOptions<any, any, any, any>>,\n  ): void {\n    super.setQueryDefaults(\n      cloneDeepUnref(queryKey),\n      cloneDeepUnref(options) as any,\n    )\n  }\n\n  getQueryDefaults(\n    queryKey?: MaybeRefDeep<QueryKey>,\n  ): QueryObserverOptions<any, any, any, any, any> | undefined {\n    return super.getQueryDefaults(cloneDeepUnref(queryKey))\n  }\n\n  setMutationDefaults(\n    mutationKey: MaybeRefDeep<MutationKey>,\n    options: MaybeRefDeep<MutationObserverOptions<any, any, any, any>>,\n  ): void {\n    super.setMutationDefaults(\n      cloneDeepUnref(mutationKey),\n      cloneDeepUnref(options) as any,\n    )\n  }\n\n  getMutationDefaults(\n    mutationKey?: MaybeRefDeep<MutationKey>,\n  ): MutationObserverOptions<any, any, any, any> | undefined {\n    return super.getMutationDefaults(cloneDeepUnref(mutationKey))\n  }\n}\n","import { parseFilterArgs, parseQueryArgs, functionalUpdate, noop, hashQueryKey, partialMatchKey, hashQueryKeyByOptions } from './utils.mjs';\nimport { QueryCache } from './queryCache.mjs';\nimport { MutationCache } from './mutationCache.mjs';\nimport { focusManager } from './focusManager.mjs';\nimport { onlineManager } from './onlineManager.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior.mjs';\nimport { defaultLogger } from './logger.mjs';\n\n// CLASS\nclass QueryClient {\n  constructor(config = {}) {\n    this.queryCache = config.queryCache || new QueryCache();\n    this.mutationCache = config.mutationCache || new MutationCache();\n    this.logger = config.logger || defaultLogger;\n    this.defaultOptions = config.defaultOptions || {};\n    this.queryDefaults = [];\n    this.mutationDefaults = [];\n    this.mountCount = 0;\n\n    if (process.env.NODE_ENV !== 'production' && config.logger) {\n      this.logger.error(\"Passing a custom logger has been deprecated and will be removed in the next major version.\");\n    }\n  }\n\n  mount() {\n    this.mountCount++;\n    if (this.mountCount !== 1) return;\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused()) {\n        this.resumePausedMutations();\n        this.queryCache.onFocus();\n      }\n    });\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (onlineManager.isOnline()) {\n        this.resumePausedMutations();\n        this.queryCache.onOnline();\n      }\n    });\n  }\n\n  unmount() {\n    var _this$unsubscribeFocu, _this$unsubscribeOnli;\n\n    this.mountCount--;\n    if (this.mountCount !== 0) return;\n    (_this$unsubscribeFocu = this.unsubscribeFocus) == null ? void 0 : _this$unsubscribeFocu.call(this);\n    this.unsubscribeFocus = undefined;\n    (_this$unsubscribeOnli = this.unsubscribeOnline) == null ? void 0 : _this$unsubscribeOnli.call(this);\n    this.unsubscribeOnline = undefined;\n  }\n\n  isFetching(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    filters.fetchStatus = 'fetching';\n    return this.queryCache.findAll(filters).length;\n  }\n\n  isMutating(filters) {\n    return this.mutationCache.findAll({ ...filters,\n      fetching: true\n    }).length;\n  }\n\n  getQueryData(queryKey, filters) {\n    var _this$queryCache$find;\n\n    return (_this$queryCache$find = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find.state.data;\n  }\n\n  ensureQueryData(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    const cachedData = this.getQueryData(parsedOptions.queryKey);\n    return cachedData ? Promise.resolve(cachedData) : this.fetchQuery(parsedOptions);\n  }\n\n  getQueriesData(queryKeyOrFilters) {\n    return this.getQueryCache().findAll(queryKeyOrFilters).map(({\n      queryKey,\n      state\n    }) => {\n      const data = state.data;\n      return [queryKey, data];\n    });\n  }\n\n  setQueryData(queryKey, updater, options) {\n    const query = this.queryCache.find(queryKey);\n    const prevData = query == null ? void 0 : query.state.data;\n    const data = functionalUpdate(updater, prevData);\n\n    if (typeof data === 'undefined') {\n      return undefined;\n    }\n\n    const parsedOptions = parseQueryArgs(queryKey);\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions);\n    return this.queryCache.build(this, defaultedOptions).setData(data, { ...options,\n      manual: true\n    });\n  }\n\n  setQueriesData(queryKeyOrFilters, updater, options) {\n    return notifyManager.batch(() => this.getQueryCache().findAll(queryKeyOrFilters).map(({\n      queryKey\n    }) => [queryKey, this.setQueryData(queryKey, updater, options)]));\n  }\n\n  getQueryState(queryKey, filters) {\n    var _this$queryCache$find2;\n\n    return (_this$queryCache$find2 = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find2.state;\n  }\n\n  removeQueries(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    const queryCache = this.queryCache;\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query);\n      });\n    });\n  }\n\n  resetQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    const queryCache = this.queryCache;\n    const refetchFilters = {\n      type: 'active',\n      ...filters\n    };\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset();\n      });\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n\n  cancelQueries(arg1, arg2, arg3) {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3);\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true;\n    }\n\n    const promises = notifyManager.batch(() => this.queryCache.findAll(filters).map(query => query.cancel(cancelOptions)));\n    return Promise.all(promises).then(noop).catch(noop);\n  }\n\n  invalidateQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    return notifyManager.batch(() => {\n      var _ref, _filters$refetchType;\n\n      this.queryCache.findAll(filters).forEach(query => {\n        query.invalidate();\n      });\n\n      if (filters.refetchType === 'none') {\n        return Promise.resolve();\n      }\n\n      const refetchFilters = { ...filters,\n        type: (_ref = (_filters$refetchType = filters.refetchType) != null ? _filters$refetchType : filters.type) != null ? _ref : 'active'\n      };\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n\n  refetchQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    const promises = notifyManager.batch(() => this.queryCache.findAll(filters).filter(query => !query.isDisabled()).map(query => {\n      var _options$cancelRefetc;\n\n      return query.fetch(undefined, { ...options,\n        cancelRefetch: (_options$cancelRefetc = options == null ? void 0 : options.cancelRefetch) != null ? _options$cancelRefetc : true,\n        meta: {\n          refetchPage: filters.refetchPage\n        }\n      });\n    }));\n    let promise = Promise.all(promises).then(noop);\n\n    if (!(options != null && options.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  }\n\n  fetchQuery(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions); // https://github.com/tannerlinsley/react-query/issues/652\n\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false;\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions);\n    return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n  }\n\n  prefetchQuery(arg1, arg2, arg3) {\n    return this.fetchQuery(arg1, arg2, arg3).then(noop).catch(noop);\n  }\n\n  fetchInfiniteQuery(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    parsedOptions.behavior = infiniteQueryBehavior();\n    return this.fetchQuery(parsedOptions);\n  }\n\n  prefetchInfiniteQuery(arg1, arg2, arg3) {\n    return this.fetchInfiniteQuery(arg1, arg2, arg3).then(noop).catch(noop);\n  }\n\n  resumePausedMutations() {\n    return this.mutationCache.resumePausedMutations();\n  }\n\n  getQueryCache() {\n    return this.queryCache;\n  }\n\n  getMutationCache() {\n    return this.mutationCache;\n  }\n\n  getLogger() {\n    return this.logger;\n  }\n\n  getDefaultOptions() {\n    return this.defaultOptions;\n  }\n\n  setDefaultOptions(options) {\n    this.defaultOptions = options;\n  }\n\n  setQueryDefaults(queryKey, options) {\n    const result = this.queryDefaults.find(x => hashQueryKey(queryKey) === hashQueryKey(x.queryKey));\n\n    if (result) {\n      result.defaultOptions = options;\n    } else {\n      this.queryDefaults.push({\n        queryKey,\n        defaultOptions: options\n      });\n    }\n  }\n\n  getQueryDefaults(queryKey) {\n    if (!queryKey) {\n      return undefined;\n    } // Get the first matching defaults\n\n\n    const firstMatchingDefaults = this.queryDefaults.find(x => partialMatchKey(queryKey, x.queryKey)); // Additional checks and error in dev mode\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.queryDefaults.filter(x => partialMatchKey(queryKey, x.queryKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n\n      if (matchingDefaults.length > 1) {\n        this.logger.error(\"[QueryClient] Several query defaults match with key '\" + JSON.stringify(queryKey) + \"'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.\");\n      }\n    }\n\n    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n  }\n\n  setMutationDefaults(mutationKey, options) {\n    const result = this.mutationDefaults.find(x => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey));\n\n    if (result) {\n      result.defaultOptions = options;\n    } else {\n      this.mutationDefaults.push({\n        mutationKey,\n        defaultOptions: options\n      });\n    }\n  }\n\n  getMutationDefaults(mutationKey) {\n    if (!mutationKey) {\n      return undefined;\n    } // Get the first matching defaults\n\n\n    const firstMatchingDefaults = this.mutationDefaults.find(x => partialMatchKey(mutationKey, x.mutationKey)); // Additional checks and error in dev mode\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.mutationDefaults.filter(x => partialMatchKey(mutationKey, x.mutationKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n\n      if (matchingDefaults.length > 1) {\n        this.logger.error(\"[QueryClient] Several mutation defaults match with key '\" + JSON.stringify(mutationKey) + \"'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.\");\n      }\n    }\n\n    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n  }\n\n  defaultQueryOptions(options) {\n    if (options != null && options._defaulted) {\n      return options;\n    }\n\n    const defaultedOptions = { ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options == null ? void 0 : options.queryKey),\n      ...options,\n      _defaulted: true\n    };\n\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);\n    } // dependent default values\n\n\n    if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\n      defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== 'always';\n    }\n\n    if (typeof defaultedOptions.useErrorBoundary === 'undefined') {\n      defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense;\n    }\n\n    return defaultedOptions;\n  }\n\n  defaultMutationOptions(options) {\n    if (options != null && options._defaulted) {\n      return options;\n    }\n\n    return { ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options == null ? void 0 : options.mutationKey),\n      ...options,\n      _defaulted: true\n    };\n  }\n\n  clear() {\n    this.queryCache.clear();\n    this.mutationCache.clear();\n  }\n\n}\n\nexport { QueryClient };\n//# sourceMappingURL=queryClient.mjs.map\n","import { isVue2 } from 'vue-demi'\nimport { isServer } from '@tanstack/query-core'\nimport type { QueryClientConfig } from '@tanstack/query-core'\n\nimport { QueryClient } from './queryClient'\nimport { getClientKey } from './utils'\nimport { setupDevtools } from './devtools/devtools'\nimport type { MaybeRefDeep } from './types'\n\ndeclare global {\n  interface Window {\n    __VUE_QUERY_CONTEXT__?: QueryClient\n  }\n}\n\ntype ClientPersister = (client: QueryClient) => [() => void, Promise<void>]\n\ninterface CommonOptions {\n  queryClientKey?: string\n  contextSharing?: boolean\n  clientPersister?: ClientPersister\n}\n\ninterface ConfigOptions extends CommonOptions {\n  queryClientConfig?: MaybeRefDeep<QueryClientConfig>\n}\n\ninterface ClientOptions extends CommonOptions {\n  queryClient?: QueryClient\n}\n\nexport type VueQueryPluginOptions = ConfigOptions | ClientOptions\n\nexport const VueQueryPlugin = {\n  install: (app: any, options: VueQueryPluginOptions = {}) => {\n    const clientKey = getClientKey(options.queryClientKey)\n    let client: QueryClient\n\n    if ('queryClient' in options && options.queryClient) {\n      client = options.queryClient\n    } else {\n      if (options.contextSharing && typeof window !== 'undefined') {\n        if (!window.__VUE_QUERY_CONTEXT__) {\n          const clientConfig =\n            'queryClientConfig' in options\n              ? options.queryClientConfig\n              : undefined\n          client = new QueryClient(clientConfig)\n          window.__VUE_QUERY_CONTEXT__ = client\n        } else {\n          client = window.__VUE_QUERY_CONTEXT__\n        }\n      } else {\n        const clientConfig =\n          'queryClientConfig' in options ? options.queryClientConfig : undefined\n        client = new QueryClient(clientConfig)\n      }\n    }\n\n    if (!isServer) {\n      client.mount()\n    }\n\n    let persisterUnmount = () => {\n      // noop\n    }\n\n    if (options.clientPersister) {\n      client.isRestoring.value = true\n      const [unmount, promise] = options.clientPersister(client)\n      persisterUnmount = unmount\n      promise.then(() => {\n        client.isRestoring.value = false\n      })\n    }\n\n    if (process.env.NODE_ENV !== 'production' && options.contextSharing) {\n      client\n        .getLogger()\n        .error(\n          `The contextSharing option has been deprecated and will be removed in the next major version`,\n        )\n    }\n\n    const cleanup = () => {\n      client.unmount()\n      persisterUnmount()\n    }\n\n    if (app.onUnmount) {\n      app.onUnmount(cleanup)\n    } else {\n      const originalUnmount = app.unmount\n      app.unmount = function vueQueryUnmount() {\n        cleanup()\n        originalUnmount()\n      }\n    }\n\n    /* istanbul ignore next */\n    if (isVue2) {\n      app.mixin({\n        beforeCreate() {\n          // HACK: taken from provide(): https://github.com/vuejs/composition-api/blob/master/src/apis/inject.ts#L30\n          if (!this._provided) {\n            const provideCache = {}\n            Object.defineProperty(this, '_provided', {\n              get: () => provideCache,\n              set: (v) => Object.assign(provideCache, v),\n            })\n          }\n\n          this._provided[clientKey] = client\n\n          if (process.env.NODE_ENV === 'development') {\n            if (this === this.$root) {\n              setupDevtools(this, client)\n            }\n          }\n        },\n      })\n    } else {\n      app.provide(clientKey, client)\n\n      if (process.env.NODE_ENV === 'development') {\n        setupDevtools(app, client)\n      }\n    }\n  },\n}\n","import {\n  onScopeDispose,\n  toRefs,\n  readonly,\n  reactive,\n  watch,\n  ref,\n  computed,\n  unref,\n} from 'vue-demi'\nimport type { ToRefs, UnwrapRef } from 'vue-demi'\nimport type {\n  QueryObserver,\n  QueryKey,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryFunction,\n} from '@tanstack/query-core'\nimport { useQueryClient } from './useQueryClient'\nimport { updateState, isQueryKey, cloneDeepUnref } from './utils'\nimport type { MaybeRef, WithQueryClientKey } from './types'\nimport type { UseQueryOptions } from './useQuery'\nimport type { UseInfiniteQueryOptions } from './useInfiniteQuery'\n\nexport type UseQueryReturnType<\n  TData,\n  TError,\n  Result = QueryObserverResult<TData, TError>,\n> = ToRefs<Readonly<Result>> & {\n  suspense: () => Promise<Result>\n}\n\ntype UseQueryOptionsGeneric<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> =\n  | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  | UseInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  Observer: typeof QueryObserver,\n  arg1:\n    | TQueryKey\n    | UseQueryOptionsGeneric<TQueryFnData, TError, TData, TQueryKey>,\n  arg2:\n    | QueryFunction<TQueryFnData, UnwrapRef<TQueryKey>>\n    | UseQueryOptionsGeneric<TQueryFnData, TError, TData, TQueryKey> = {},\n  arg3: UseQueryOptionsGeneric<TQueryFnData, TError, TData, TQueryKey> = {},\n): UseQueryReturnType<TData, TError> {\n  const options = computed(() => parseQueryArgs(arg1, arg2, arg3))\n\n  const queryClient =\n    options.value.queryClient ?? useQueryClient(options.value.queryClientKey)\n\n  const defaultedOptions = computed(() => {\n    const defaulted = queryClient.defaultQueryOptions(options.value)\n    defaulted._optimisticResults = queryClient.isRestoring.value\n      ? 'isRestoring'\n      : 'optimistic'\n\n    return defaulted\n  })\n\n  const observer = new Observer(queryClient, defaultedOptions.value)\n  const state = reactive(observer.getCurrentResult())\n\n  const unsubscribe = ref(() => {\n    // noop\n  })\n\n  watch(\n    queryClient.isRestoring,\n    (isRestoring) => {\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isRestoring) {\n        unsubscribe.value()\n        unsubscribe.value = observer.subscribe((result) => {\n          updateState(state, result)\n        })\n      }\n    },\n    { immediate: true },\n  )\n\n  watch(\n    defaultedOptions,\n    () => {\n      observer.setOptions(defaultedOptions.value)\n      updateState(state, observer.getCurrentResult())\n    },\n    { deep: true },\n  )\n\n  onScopeDispose(() => {\n    unsubscribe.value()\n  })\n\n  const suspense = () => {\n    return new Promise<QueryObserverResult<TData, TError>>((resolve) => {\n      let stopWatch = () => {\n        //noop\n      }\n      const run = () => {\n        if (defaultedOptions.value.enabled !== false) {\n          const optimisticResult = observer.getOptimisticResult(\n            defaultedOptions.value,\n          )\n          if (optimisticResult.isStale) {\n            stopWatch()\n            resolve(observer.fetchOptimistic(defaultedOptions.value))\n          } else {\n            stopWatch()\n            resolve(optimisticResult)\n          }\n        }\n      }\n\n      run()\n\n      stopWatch = watch(defaultedOptions, run, { deep: true })\n    })\n  }\n\n  return {\n    ...(toRefs(readonly(state)) as UseQueryReturnType<TData, TError>),\n    suspense,\n  }\n}\n\nexport function parseQueryArgs<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1:\n    | MaybeRef<TQueryKey>\n    | MaybeRef<UseQueryOptionsGeneric<TQueryFnData, TError, TData, TQueryKey>>,\n  arg2:\n    | MaybeRef<QueryFunction<TQueryFnData, UnwrapRef<TQueryKey>>>\n    | MaybeRef<\n        UseQueryOptionsGeneric<TQueryFnData, TError, TData, TQueryKey>\n      > = {},\n  arg3: MaybeRef<\n    UseQueryOptionsGeneric<TQueryFnData, TError, TData, TQueryKey>\n  > = {},\n): WithQueryClientKey<\n  QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>\n> {\n  const plainArg1 = unref(arg1)\n  const plainArg2 = unref(arg2)\n  const plainArg3 = unref(arg3)\n\n  let options = plainArg1\n\n  if (!isQueryKey(plainArg1)) {\n    options = plainArg1\n  } else if (typeof plainArg2 === 'function') {\n    options = { ...plainArg3, queryKey: plainArg1, queryFn: plainArg2 }\n  } else {\n    options = { ...plainArg2, queryKey: plainArg1 }\n  }\n\n  return cloneDeepUnref(options) as WithQueryClientKey<\n    QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>\n  >\n}\n","import { InfiniteQueryObserver } from '@tanstack/query-core'\nimport type { UnwrapRef } from 'vue-demi'\nimport type {\n  QueryObserver,\n  QueryFunction,\n  QueryKey,\n  InfiniteQueryObserverResult,\n} from '@tanstack/query-core'\n\nimport { useBaseQuery } from './useBaseQuery'\nimport type { UseQueryReturnType } from './useBaseQuery'\n\nimport type {\n  WithQueryClientKey,\n  VueInfiniteQueryObserverOptions,\n  DistributiveOmit,\n} from './types'\n\nexport type UseInfiniteQueryOptions<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = WithQueryClientKey<\n  VueInfiniteQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey\n  >\n>\n\ntype InfiniteQueryReturnType<TData, TError> = UseQueryReturnType<\n  TData,\n  TError,\n  InfiniteQueryObserverResult<TData, TError>\n>\nexport type UseInfiniteQueryReturnType<TData, TError> = DistributiveOmit<\n  InfiniteQueryReturnType<TData, TError>,\n  'fetchNextPage' | 'fetchPreviousPage' | 'refetch' | 'remove'\n> & {\n  fetchNextPage: InfiniteQueryObserverResult<TData, TError>['fetchNextPage']\n  fetchPreviousPage: InfiniteQueryObserverResult<\n    TData,\n    TError\n  >['fetchPreviousPage']\n  refetch: InfiniteQueryObserverResult<TData, TError>['refetch']\n  remove: InfiniteQueryObserverResult<TData, TError>['remove']\n}\n\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseInfiniteQueryReturnType<TData, TError>\n\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey'\n  >,\n): UseInfiniteQueryReturnType<TData, TError>\n\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, UnwrapRef<TQueryKey>>,\n  options?: Omit<\n    UseInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn'\n  >,\n): UseInfiniteQueryReturnType<TData, TError>\n\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1:\n    | TQueryKey\n    | UseInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg2?:\n    | QueryFunction<TQueryFnData, UnwrapRef<TQueryKey>>\n    | UseInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg3?: UseInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseInfiniteQueryReturnType<TData, TError> {\n  const result = useBaseQuery(\n    InfiniteQueryObserver as typeof QueryObserver,\n    arg1,\n    arg2,\n    arg3,\n  ) as InfiniteQueryReturnType<TData, TError>\n  return {\n    ...result,\n    fetchNextPage: result.fetchNextPage.value,\n    fetchPreviousPage: result.fetchPreviousPage.value,\n    refetch: result.refetch.value,\n    remove: result.remove.value,\n  }\n}\n","import { computed, unref, onScopeDispose, ref, watch } from 'vue-demi'\nimport type { Ref } from 'vue-demi'\nimport type { QueryKey, QueryFilters as QF } from '@tanstack/query-core'\n\nimport { useQueryClient } from './useQueryClient'\nimport { cloneDeepUnref, isQueryKey } from './utils'\nimport type { MaybeRef, MaybeRefDeep, WithQueryClientKey } from './types'\n\nexport type QueryFilters = MaybeRefDeep<WithQueryClientKey<QF>>\n\nexport function useIsFetching(filters?: QueryFilters): Ref<number>\nexport function useIsFetching(\n  queryKey?: MaybeRef<QueryKey>,\n  filters?: Omit<QueryFilters, 'queryKey'>,\n): Ref<number>\nexport function useIsFetching(\n  arg1?: MaybeRef<QueryKey> | QueryFilters,\n  arg2?: Omit<QueryFilters, 'queryKey'>,\n): Ref<number> {\n  const filters = computed(() => parseFilterArgs(arg1, arg2))\n  const queryClient =\n    filters.value.queryClient ?? useQueryClient(filters.value.queryClientKey)\n\n  const isFetching = ref(queryClient.isFetching(filters))\n\n  const unsubscribe = queryClient.getQueryCache().subscribe(() => {\n    isFetching.value = queryClient.isFetching(filters)\n  })\n\n  watch(\n    filters,\n    () => {\n      isFetching.value = queryClient.isFetching(filters)\n    },\n    { deep: true },\n  )\n\n  onScopeDispose(() => {\n    unsubscribe()\n  })\n\n  return isFetching\n}\n\nexport function parseFilterArgs(\n  arg1?: MaybeRef<QueryKey> | QueryFilters,\n  arg2: QueryFilters = {},\n) {\n  const plainArg1 = unref(arg1)\n  const plainArg2 = unref(arg2)\n\n  let options = plainArg1\n\n  if (isQueryKey(plainArg1)) {\n    options = { ...plainArg2, queryKey: plainArg1 }\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    options = plainArg1 || {}\n  }\n\n  return cloneDeepUnref(options) as WithQueryClientKey<QF>\n}\n","import { computed, unref, onScopeDispose, ref, watch } from 'vue-demi'\nimport type { Ref } from 'vue-demi'\nimport type { MutationKey, MutationFilters as MF } from '@tanstack/query-core'\n\nimport { useQueryClient } from './useQueryClient'\nimport { cloneDeepUnref, isQueryKey } from './utils'\nimport type { MaybeRef, MaybeRefDeep, WithQueryClientKey } from './types'\n\nexport type MutationFilters = MaybeRefDeep<WithQueryClientKey<MF>>\n\nexport function useIsMutating(filters?: MutationFilters): Ref<number>\nexport function useIsMutating(\n  mutationKey?: MaybeRef<MutationKey>,\n  filters?: Omit<MutationFilters, 'mutationKey'>,\n): Ref<number>\nexport function useIsMutating(\n  arg1?: MaybeRef<MutationKey> | MutationFilters,\n  arg2?: Omit<MutationFilters, 'mutationKey'>,\n): Ref<number> {\n  const filters = computed(() => parseFilterArgs(arg1, arg2))\n  const queryClient =\n    filters.value.queryClient ?? useQueryClient(filters.value.queryClientKey)\n\n  const isMutating = ref(queryClient.isMutating(filters))\n\n  const unsubscribe = queryClient.getMutationCache().subscribe(() => {\n    isMutating.value = queryClient.isMutating(filters)\n  })\n\n  watch(\n    filters,\n    () => {\n      isMutating.value = queryClient.isMutating(filters)\n    },\n    { deep: true },\n  )\n\n  onScopeDispose(() => {\n    unsubscribe()\n  })\n\n  return isMutating\n}\n\nexport function parseFilterArgs(\n  arg1?: MaybeRef<MutationKey> | MutationFilters,\n  arg2: MutationFilters = {},\n) {\n  const plainArg1 = unref(arg1)\n  const plainArg2 = unref(arg2)\n\n  let options = plainArg1\n\n  if (isQueryKey(plainArg1)) {\n    options = { ...plainArg2, mutationKey: plainArg1 }\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    options = plainArg1 || {}\n  }\n\n  return cloneDeepUnref(options) as WithQueryClientKey<MF>\n}\n","import {\n  onScopeDispose,\n  reactive,\n  readonly,\n  toRefs,\n  watch,\n  computed,\n  unref,\n} from 'vue-demi'\nimport type { ToRefs } from 'vue-demi'\nimport type {\n  MutateOptions,\n  MutationFunction,\n  MutationKey,\n  MutateFunction,\n  MutationObserverResult,\n  MutationObserverOptions,\n} from '@tanstack/query-core'\nimport type {\n  WithQueryClientKey,\n  MaybeRef,\n  MaybeRefDeep,\n  DistributiveOmit,\n} from './types'\nimport { MutationObserver } from '@tanstack/query-core'\nimport { cloneDeepUnref, updateState, isMutationKey } from './utils'\nimport { useQueryClient } from './useQueryClient'\n\ntype MutationResult<TData, TError, TVariables, TContext> = DistributiveOmit<\n  MutationObserverResult<TData, TError, TVariables, TContext>,\n  'mutate' | 'reset'\n>\n\nexport type UseMutationOptions<TData, TError, TVariables, TContext> =\n  WithQueryClientKey<\n    MutationObserverOptions<TData, TError, TVariables, TContext>\n  >\n\nexport type VueMutationObserverOptions<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> = {\n  [Property in keyof UseMutationOptions<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >]: MaybeRefDeep<\n    UseMutationOptions<TData, TError, TVariables, TContext>[Property]\n  >\n}\n\ntype MutateSyncFunction<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> = (\n  ...options: Parameters<MutateFunction<TData, TError, TVariables, TContext>>\n) => void\n\nexport type UseMutationReturnType<\n  TData,\n  TError,\n  TVariables,\n  TContext,\n  Result = MutationResult<TData, TError, TVariables, TContext>,\n> = ToRefs<Readonly<Result>> & {\n  mutate: MutateSyncFunction<TData, TError, TVariables, TContext>\n  mutateAsync: MutateFunction<TData, TError, TVariables, TContext>\n  reset: MutationObserverResult<TData, TError, TVariables, TContext>['reset']\n}\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: MaybeRef<\n    VueMutationObserverOptions<TData, TError, TVariables, TContext>\n  >,\n): UseMutationReturnType<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationFn: MaybeRef<MutationFunction<TData, TVariables>>,\n  options?: MaybeRef<\n    Omit<\n      VueMutationObserverOptions<TData, TError, TVariables, TContext>,\n      'mutationFn'\n    >\n  >,\n): UseMutationReturnType<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MaybeRef<MutationKey>,\n  options?: MaybeRef<\n    Omit<\n      VueMutationObserverOptions<TData, TError, TVariables, TContext>,\n      'mutationKey'\n    >\n  >,\n): UseMutationReturnType<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MaybeRef<MutationKey>,\n  mutationFn?: MaybeRef<MutationFunction<TData, TVariables>>,\n  options?: MaybeRef<\n    Omit<\n      VueMutationObserverOptions<TData, TError, TVariables, TContext>,\n      'mutationKey' | 'mutationFn'\n    >\n  >,\n): UseMutationReturnType<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  arg1:\n    | MaybeRef<MutationKey>\n    | MaybeRef<MutationFunction<TData, TVariables>>\n    | MaybeRef<VueMutationObserverOptions<TData, TError, TVariables, TContext>>,\n  arg2?:\n    | MaybeRef<MutationFunction<TData, TVariables>>\n    | MaybeRef<VueMutationObserverOptions<TData, TError, TVariables, TContext>>,\n  arg3?: MaybeRef<\n    VueMutationObserverOptions<TData, TError, TVariables, TContext>\n  >,\n): UseMutationReturnType<TData, TError, TVariables, TContext> {\n  const options = computed(() => {\n    return parseMutationArgs(arg1, arg2, arg3)\n  })\n  const queryClient =\n    options.value.queryClient ?? useQueryClient(options.value.queryClientKey)\n  const observer = new MutationObserver(\n    queryClient,\n    queryClient.defaultMutationOptions(options.value),\n  )\n  const state = reactive(observer.getCurrentResult())\n\n  const unsubscribe = observer.subscribe((result) => {\n    updateState(state, result)\n  })\n\n  const mutate = (\n    variables: TVariables,\n    mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>,\n  ) => {\n    observer.mutate(variables, mutateOptions).catch(() => {\n      // This is intentional\n    })\n  }\n\n  watch(\n    options,\n    () => {\n      observer.setOptions(queryClient.defaultMutationOptions(options.value))\n    },\n    { deep: true },\n  )\n\n  onScopeDispose(() => {\n    unsubscribe()\n  })\n\n  const resultRefs = toRefs(readonly(state)) as unknown as ToRefs<\n    Readonly<MutationResult<TData, TError, TVariables, TContext>>\n  >\n\n  return {\n    ...resultRefs,\n    mutate,\n    mutateAsync: state.mutate,\n    reset: state.reset,\n  }\n}\n\nexport function parseMutationArgs<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  arg1:\n    | MaybeRef<MutationKey>\n    | MaybeRef<MutationFunction<TData, TVariables>>\n    | MaybeRef<VueMutationObserverOptions<TData, TError, TVariables, TContext>>,\n  arg2?:\n    | MaybeRef<MutationFunction<TData, TVariables>>\n    | MaybeRef<VueMutationObserverOptions<TData, TError, TVariables, TContext>>,\n  arg3?: MaybeRef<\n    VueMutationObserverOptions<TData, TError, TVariables, TContext>\n  >,\n): WithQueryClientKey<\n  MutationObserverOptions<TData, TError, TVariables, TContext>\n> {\n  const plainArg1 = unref(arg1)\n  const plainArg2 = unref(arg2)\n  let options = plainArg1\n  if (isMutationKey(plainArg1)) {\n    if (typeof plainArg2 === 'function') {\n      const plainArg3 = unref(arg3)\n      options = { ...plainArg3, mutationKey: plainArg1, mutationFn: plainArg2 }\n    } else {\n      options = { ...plainArg2, mutationKey: plainArg1 }\n    }\n  }\n\n  if (typeof plainArg1 === 'function') {\n    options = { ...plainArg2, mutationFn: plainArg1 }\n  }\n\n  return cloneDeepUnref(options) as UseMutationOptions<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { QueriesObserver } from '@tanstack/query-core'\nimport {\n  computed,\n  onScopeDispose,\n  reactive,\n  readonly,\n  ref,\n  watch,\n} from 'vue-demi'\nimport type { Ref } from 'vue-demi'\n\nimport type { QueryFunction, QueryObserverResult } from '@tanstack/query-core'\n\nimport { useQueryClient } from './useQueryClient'\nimport { cloneDeepUnref } from './utils'\nimport type { UseQueryOptions } from './useQuery'\nimport type { QueryClient } from './queryClient'\n\n// Avoid TS depth-limit error in case of large array literal\ntype MAXIMUM_DEPTH = 20\n\ntype GetOptions<T> =\n  // Part 1: responsible for applying explicit type parameter to function arguments, if object { queryFnData: TQueryFnData, error: TError, data: TData }\n  T extends {\n    queryFnData: infer TQueryFnData\n    error?: infer TError\n    data: infer TData\n  }\n    ? UseQueryOptions<TQueryFnData, TError, TData>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n    ? UseQueryOptions<TQueryFnData, TError>\n    : T extends { data: infer TData; error?: infer TError }\n    ? UseQueryOptions<unknown, TError, TData>\n    : // Part 2: responsible for applying explicit type parameter to function arguments, if tuple [TQueryFnData, TError, TData]\n    T extends [infer TQueryFnData, infer TError, infer TData]\n    ? UseQueryOptions<TQueryFnData, TError, TData>\n    : T extends [infer TQueryFnData, infer TError]\n    ? UseQueryOptions<TQueryFnData, TError>\n    : T extends [infer TQueryFnData]\n    ? UseQueryOptions<TQueryFnData>\n    : // Part 3: responsible for inferring and enforcing type if no explicit parameter was provided\n    T extends {\n        queryFn?: QueryFunction<infer TQueryFnData, infer TQueryKey>\n        select: (data: any) => infer TData\n      }\n    ? UseQueryOptions<TQueryFnData, unknown, TData, TQueryKey>\n    : T extends { queryFn?: QueryFunction<infer TQueryFnData, infer TQueryKey> }\n    ? UseQueryOptions<TQueryFnData, unknown, TQueryFnData, TQueryKey>\n    : // Fallback\n      UseQueryOptions\n\ntype GetResults<T> =\n  // Part 1: responsible for mapping explicit type parameter to function result, if object\n  T extends { queryFnData: any; error?: infer TError; data: infer TData }\n    ? QueryObserverResult<TData, TError>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n    ? QueryObserverResult<TQueryFnData, TError>\n    : T extends { data: infer TData; error?: infer TError }\n    ? QueryObserverResult<TData, TError>\n    : // Part 2: responsible for mapping explicit type parameter to function result, if tuple\n    T extends [any, infer TError, infer TData]\n    ? QueryObserverResult<TData, TError>\n    : T extends [infer TQueryFnData, infer TError]\n    ? QueryObserverResult<TQueryFnData, TError>\n    : T extends [infer TQueryFnData]\n    ? QueryObserverResult<TQueryFnData>\n    : // Part 3: responsible for mapping inferred type to results, if no explicit parameter was provided\n    T extends {\n        queryFn?: QueryFunction<unknown, any>\n        select: (data: any) => infer TData\n      }\n    ? QueryObserverResult<TData>\n    : T extends { queryFn?: QueryFunction<infer TQueryFnData, any> }\n    ? QueryObserverResult<TQueryFnData>\n    : // Fallback\n      QueryObserverResult\n\n/**\n * UseQueriesOptions reducer recursively unwraps function arguments to infer/enforce type param\n */\nexport type UseQueriesOptions<\n  T extends any[],\n  Result extends any[] = [],\n  Depth extends ReadonlyArray<number> = [],\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? UseQueryOptions[]\n  : T extends []\n  ? []\n  : T extends [infer Head]\n  ? [...Result, GetOptions<Head>]\n  : T extends [infer Head, ...infer Tail]\n  ? UseQueriesOptions<[...Tail], [...Result, GetOptions<Head>], [...Depth, 1]>\n  : unknown[] extends T\n  ? T\n  : // If T is *some* array but we couldn't assign unknown[] to it, then it must hold some known/homogenous type!\n  // use this to infer the param types in the case of Array.map() argument\n  T extends UseQueryOptions<\n      infer TQueryFnData,\n      infer TError,\n      infer TData,\n      infer TQueryKey\n    >[]\n  ? UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>[]\n  : // Fallback\n    UseQueryOptions[]\n\n/**\n * UseQueriesResults reducer recursively maps type param to results\n */\nexport type UseQueriesResults<\n  T extends any[],\n  Result extends any[] = [],\n  Depth extends ReadonlyArray<number> = [],\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? QueryObserverResult[]\n  : T extends []\n  ? []\n  : T extends [infer Head]\n  ? [...Result, GetResults<Head>]\n  : T extends [infer Head, ...infer Tail]\n  ? UseQueriesResults<[...Tail], [...Result, GetResults<Head>], [...Depth, 1]>\n  : T extends UseQueryOptions<\n      infer TQueryFnData,\n      infer TError,\n      infer TData,\n      any\n    >[]\n  ? // Dynamic-size (homogenous) UseQueryOptions array: map directly to array of results\n    QueryObserverResult<unknown extends TData ? TQueryFnData : TData, TError>[]\n  : // Fallback\n    QueryObserverResult[]\n\ntype UseQueriesOptionsArg<T extends any[]> = readonly [...UseQueriesOptions<T>]\n\nexport function useQueries<T extends any[]>({\n  queries,\n  queryClient: queryClientInjected,\n}: {\n  queries: Ref<UseQueriesOptionsArg<T>> | UseQueriesOptionsArg<T>\n  queryClient?: QueryClient\n}): Readonly<UseQueriesResults<T>> {\n  const unreffedQueries = computed(\n    () => cloneDeepUnref(queries) as UseQueriesOptionsArg<T>,\n  )\n\n  const queryClientKey = unreffedQueries.value[0]?.queryClientKey\n  const optionsQueryClient = unreffedQueries.value[0]?.queryClient as\n    | QueryClient\n    | undefined\n  const queryClient =\n    queryClientInjected ?? optionsQueryClient ?? useQueryClient(queryClientKey)\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    (queryClientKey || optionsQueryClient)\n  ) {\n    queryClient\n      .getLogger()\n      .error(\n        `Providing queryClient to individual queries in useQueries has been deprecated and will be removed in the next major version. You can still pass queryClient as an option directly to useQueries hook.`,\n      )\n  }\n\n  const defaultedQueries = computed(() =>\n    unreffedQueries.value.map((options) => {\n      const defaulted = queryClient.defaultQueryOptions(options)\n      defaulted._optimisticResults = queryClient.isRestoring.value\n        ? 'isRestoring'\n        : 'optimistic'\n\n      return defaulted\n    }),\n  )\n\n  const observer = new QueriesObserver(queryClient, defaultedQueries.value)\n  const state = reactive(observer.getCurrentResult())\n\n  const unsubscribe = ref(() => {\n    // noop\n  })\n\n  watch(\n    queryClient.isRestoring,\n    (isRestoring) => {\n      if (!isRestoring) {\n        unsubscribe.value()\n        unsubscribe.value = observer.subscribe((result) => {\n          state.splice(0, result.length, ...result)\n        })\n        // Subscription would not fire for persisted results\n        state.splice(\n          0,\n          state.length,\n          ...observer.getOptimisticResult(defaultedQueries.value),\n        )\n      }\n    },\n    { immediate: true },\n  )\n\n  watch(\n    unreffedQueries,\n    () => {\n      observer.setQueries(defaultedQueries.value)\n      state.splice(0, state.length, ...observer.getCurrentResult())\n    },\n    { deep: true },\n  )\n\n  onScopeDispose(() => {\n    unsubscribe.value()\n  })\n\n  return readonly(state) as UseQueriesResults<T>\n}\n","import type { ToRefs, UnwrapRef } from 'vue-demi'\nimport { QueryObserver } from '@tanstack/query-core'\nimport type {\n  QueryFunction,\n  QueryKey,\n  QueryObserverResult,\n  DefinedQueryObserverResult,\n} from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type { UseQueryReturnType as UQRT } from './useBaseQuery'\nimport type {\n  WithQueryClientKey,\n  VueQueryObserverOptions,\n  DistributiveOmit,\n} from './types'\n\nexport type UseQueryReturnType<TData, TError> = DistributiveOmit<\n  UQRT<TData, TError>,\n  'refetch' | 'remove'\n> & {\n  refetch: QueryObserverResult<TData, TError>['refetch']\n  remove: QueryObserverResult<TData, TError>['remove']\n}\n\nexport type UseQueryDefinedReturnType<TData, TError> = DistributiveOmit<\n  ToRefs<Readonly<DefinedQueryObserverResult<TData, TError>>>,\n  'refetch' | 'remove'\n> & {\n  suspense: () => Promise<QueryObserverResult<TData, TError>>\n  refetch: QueryObserverResult<TData, TError>['refetch']\n  remove: QueryObserverResult<TData, TError>['remove']\n}\n\nexport type UseQueryOptions<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = WithQueryClientKey<\n  VueQueryObserverOptions<TQueryFnData, TError, TData, TQueryFnData, TQueryKey>\n>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryReturnType<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): UseQueryDefinedReturnType<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryReturnType<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryReturnType<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): UseQueryDefinedReturnType<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey'\n  >,\n): UseQueryReturnType<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, UnwrapRef<TQueryKey>>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryReturnType<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, UnwrapRef<TQueryKey>>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): UseQueryDefinedReturnType<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, UnwrapRef<TQueryKey>>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn'\n  >,\n): UseQueryReturnType<TData, TError>\n\nexport function useQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1: TQueryKey | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg2?:\n    | QueryFunction<TQueryFnData, UnwrapRef<TQueryKey>>\n    | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg3?: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n):\n  | UseQueryReturnType<TData, TError>\n  | UseQueryDefinedReturnType<TData, TError> {\n  const result = useBaseQuery(QueryObserver, arg1, arg2, arg3)\n\n  return {\n    ...result,\n    refetch: result.refetch.value,\n    remove: result.remove.value,\n  }\n}\n"],"names":["Subscribable","constructor","this","listeners","subscribe","bind","listener","push","onSubscribe","filter","x","onUnsubscribe","hasListeners","length","isServer","window","noop","isValidTimeout","value","Infinity","difference","array1","array2","indexOf","timeUntilStale","updatedAt","staleTime","Math","max","Date","now","parseQueryArgs","arg1","arg2","arg3","isQueryKey","queryKey","queryFn","parseFilterArgs","matchQuery","filters","query","type","exact","fetchStatus","predicate","stale","queryHash","hashQueryKeyByOptions","options","partialMatchKey","isActive","isStale","state","matchMutation","mutation","fetching","mutationKey","hashQueryKey","status","queryKeyHashFn","JSON","stringify","_","val","isPlainObject","Object","keys","sort","reduce","result","key","a","b","partialDeepEqual","some","replaceEqualDeep","array","isPlainArray","aSize","bItems","bSize","copy","equalItems","i","shallowEqualObjects","Array","isArray","o","hasObjectPrototype","ctor","prot","prototype","hasOwnProperty","toString","call","sleep","timeout","Promise","resolve","setTimeout","scheduleMicrotask","callback","then","replaceData","prevData","data","isDataEqual","structuralSharing","focusManager","super","setup","onFocus","addEventListener","removeEventListener","cleanup","setEventListener","_this$cleanup","undefined","_this$cleanup2","focused","setFocused","forEach","isFocused","document","includes","visibilityState","onlineManager","onOnline","online","setOnline","isOnline","navigator","onLine","defaultRetryDelay","failureCount","min","canFetch","networkMode","CancelledError","revert","silent","isCancelledError","createRetryer","config","continueFn","promiseResolve","promiseReject","isRetryCancelled","isResolved","promise","outerResolve","outerReject","shouldPause","onSuccess","reject","onError","pause","continueResolve","canContinue","onPause","onContinue","run","promiseOrValue","fn","error","catch","_config$retry","_config$retryDelay","retry","retryDelay","delay","shouldRetry","onFail","cancel","cancelOptions","abort","continue","cancelRetry","continueRetry","defaultLogger","console","notifyManager","queue","transactions","notifyFn","batchNotifyFn","schedule","flush","originalQueue","batch","batchCalls","args","setNotifyFunction","setBatchNotifyFunction","createNotifyManager","Removable","destroy","clearGcTimeout","scheduleGc","cacheTime","gcTimeout","optionalRemove","updateCacheTime","newCacheTime","clearTimeout","Query","abortSignalConsumed","defaultOptions","setOptions","observers","cache","logger","initialState","initialData","hasData","initialDataUpdatedAt","dataUpdateCount","dataUpdatedAt","errorUpdateCount","errorUpdatedAt","fetchFailureCount","fetchFailureReason","fetchMeta","isInvalidated","getDefaultState","meta","remove","setData","newData","dispatch","manual","setState","setStateOptions","_this$retryer","retryer","reset","observer","enabled","isDisabled","getObserversCount","getCurrentResult","isStaleByTime","_this$retryer2","find","shouldFetchOnWindowFocus","refetch","cancelRefetch","_this$retryer3","shouldFetchOnReconnect","addObserver","notify","removeObserver","invalidate","fetch","fetchOptions","_this$options$behavio","_context$fetchOptions","_this$retryer4","abortController","AbortController","getAbortController","queryFnContext","pageParam","addSignalProperty","object","defineProperty","enumerable","get","signal","context","fetchFn","_context$fetchOptions2","behavior","onFetch","revertState","_this$cache$config$on","_this$cache$config","_this$cache$config$on2","_this$cache$config2","onSettled","isFetchingOptimistic","_this$cache$config$on3","_this$cache$config3","_this$cache$config$on4","_this$cache$config4","Error","action","_action$meta","_action$dataUpdatedAt","reducer","onQueryUpdate","QueryCache","queries","queriesMap","build","client","_options$queryHash","getLogger","defaultQueryOptions","getQueryDefaults","add","queryInMap","clear","getAll","findAll","event","Mutation","mutationId","mutationCache","_this$retryer$continu","execute","async","executeMutation","_this$options$retry","mutationFn","variables","restored","_this$mutationCache$c3","_this$mutationCache$c4","_this$options$onSucce","_this$options2","_this$mutationCache$c5","_this$mutationCache$c6","_this$options$onSettl","_this$options3","_this$mutationCache$c","_this$mutationCache$c2","_this$options$onMutat","_this$options","onMutate","_this$mutationCache$c7","_this$mutationCache$c8","_this$options$onError","_this$options4","_this$mutationCache$c9","_this$mutationCache$c10","_this$options$onSettl2","_this$options5","failureReason","isPaused","onMutationUpdate","MutationCache","mutations","defaultMutationOptions","getMutationDefaults","resumePausedMutations","_this$resuming","resuming","pausedMutations","infiniteQueryBehavior","_context$fetchOptions3","_context$fetchOptions4","_context$state$data","_context$state$data2","refetchPage","fetchMore","isFetchingNextPage","direction","isFetchingPreviousPage","oldPages","pages","oldPageParams","pageParams","newPageParams","cancelled","buildNewPages","param","page","previous","fetchPage","_context$signal","_context$signal2","aborted","queryFnResult","getNextPageParam","getPreviousPageParam","hasNextPage","nextPageParam","hasPreviousPage","previousPageParam","QueryObserver","trackedProps","Set","selectError","bindMethods","currentQuery","shouldFetchOnMount","executeFetch","updateTimers","shouldFetchOn","refetchOnReconnect","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","notifyOptions","prevOptions","prevQuery","getQueryCache","updateQuery","mounted","shouldFetchOptionally","updateResult","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","getOptimisticResult","createResult","currentResult","trackResult","trackedResult","configurable","getCurrentQuery","fetchOptimistic","defaultedOptions","_fetchOptions$cancelR","throwOnError","staleTimeoutId","_this$options$refetch","refetchInterval","nextInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","isPreviousData","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","keepPreviousData","isSuccess","select","selectFn","selectResult","placeholderData","isFetching","isLoading","isError","isInitialLoading","isFetched","isFetchedAfterMount","isRefetching","isLoadingError","isRefetchError","nextResult","defaultNotifyOptions","notifyOnChangeProps","size","includedProps","useErrorBoundary","typedKey","has","shouldNotifyListeners","retryOnMount","shouldLoadOnMount","refetchOnMount","field","suspense","QueriesObserver","observersMap","setQueries","onUpdate","prevObservers","newObserverMatches","findMatchingObservers","match","defaultedQueryOptions","newObservers","map","newObserversMap","fromEntries","newResult","hasIndexChange","index","getQueries","getObservers","prevObserversMap","Map","matchingObservers","flatMap","matchedQueryHashes","unmatchedQueries","matchingObserversSet","unmatchedObservers","prevObserver","getObserver","currentObserver","newOrReusedObservers","previouslyUsedObserver","concat","slice","replaceAt","InfiniteQueryObserver","fetchNextPage","fetchPreviousPage","_state$fetchMeta","_state$fetchMeta$fetc","_state$fetchMeta2","_state$fetchMeta2$fet","_state$data","_state$data2","MutationObserver","mutate","_this$currentMutation","getMutationCache","currentMutation","_this$currentMutation2","mutateOptions","isIdle","_this$mutateOptions$o","_this$mutateOptions","_this$mutateOptions$o2","_this$mutateOptions2","_this$mutateOptions$o3","_this$mutateOptions3","_this$mutateOptions$o4","_this$mutateOptions4","defaultShouldDehydrateMutation","defaultShouldDehydrateQuery","VUE_QUERY_CLIENT","getClientKey","updateState","update","cloneDeep","customizer","isRef","getPrototypeOf","entries","cloneDeepUnref","obj","unref","useQueryClient","id","_getCurrentInstance","getCurrentInstance","proxy","queryClient","inject","QC","arg1Unreffed","arg2Unreffed","MC","QueryClient","queryCache","queryDefaults","mutationDefaults","mountCount","mount","unsubscribeFocus","unsubscribeOnline","unmount","_this$unsubscribeFocu","_this$unsubscribeOnli","isMutating","getQueryData","_this$queryCache$find","ensureQueryData","parsedOptions","cachedData","fetchQuery","getQueriesData","queryKeyOrFilters","setQueryData","updater","input","functionalUpdate","setQueriesData","getQueryState","_this$queryCache$find2","removeQueries","resetQueries","refetchFilters","refetchQueries","cancelQueries","promises","all","invalidateQueries","_ref","_filters$refetchType","refetchType","_options$cancelRefetc","prefetchQuery","fetchInfiniteQuery","prefetchInfiniteQuery","getDefaultOptions","setDefaultOptions","setQueryDefaults","firstMatchingDefaults","setMutationDefaults","_defaulted","unreffedConfig","isRestoring","ref","unreffed","arg3Unreffed","VueQueryPlugin","install","app","clientKey","queryClientKey","contextSharing","__VUE_QUERY_CONTEXT__","clientConfig","queryClientConfig","persisterUnmount","clientPersister","onUnmount","originalUnmount","isVue2","mixin","beforeCreate","_provided","provideCache","set","v","assign","provide","useBaseQuery","Observer","_options$value$queryC","computed","plainArg1","plainArg2","plainArg3","defaulted","reactive","unsubscribe","watch","immediate","deep","onScopeDispose","toRefs","readonly","stopWatch","optimisticResult","dehydrateMutations","shouldDehydrateMutation","dehydrateMutation","dehydrateQueries","shouldDehydrateQuery","dehydrateQuery","dehydratedState","dehydratedMutation","_options$defaultOptio","dehydratedQuery","_options$defaultOptio2","dehydratedQueryState","_filters$value$queryC","parseMutationArgs","mutateAsync","queryClientInjected","_unreffedQueries$valu","_unreffedQueries$valu2","unreffedQueries","optionsQueryClient","defaultedQueries","splice"],"mappings":"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"}